 --- modulename: hw5_216, funcname: <module>
hw5_216.py(1): def main():
hw5_216.py(10): main()
 --- modulename: hw5_216, funcname: main
hw5_216.py(2):     width = int(input("Enter the width of the box"))
Enter the width of the box --- modulename: codecs, funcname: getstate
codecs.py(332):         return (self.buffer, 0)
 --- modulename: codecs, funcname: decode
codecs.py(320):         data = self.buffer + input
codecs.py(321):         (result, consumed) = self._buffer_decode(data, self.errors, final)
codecs.py(323):         self.buffer = data[consumed:]
codecs.py(324):         return result
hw5_216.py(3):     length = int(input("Enter the length of the box"))
Enter the length of the boxhw5_216.py(4):     symb = input("Enter a symbol for the outline of the box")
Enter a symbol for the outline of the boxhw5_216.py(5):     symb2 = input("Enter a symbol for the box fill.")
Enter a symbol for the box fill. --- modulename: codecs, funcname: getstate
codecs.py(332):         return (self.buffer, 0)
 --- modulename: codecs, funcname: decode
codecs.py(320):         data = self.buffer + input
codecs.py(321):         (result, consumed) = self._buffer_decode(data, self.errors, final)
codecs.py(323):         self.buffer = data[consumed:]
codecs.py(324):         return result
hw5_216.py(6):     print(symb * width)
$$$$$
hw5_216.py(7):     for n in range(0, length-1):
hw5_216.py(8):         print( symb + symb2*(width-2) + symb)
$###$
hw5_216.py(7):     for n in range(0, length-1):
hw5_216.py(8):         print( symb + symb2*(width-2) + symb)
$###$
hw5_216.py(7):     for n in range(0, length-1):
hw5_216.py(8):         print( symb + symb2*(width-2) + symb)
$###$
hw5_216.py(7):     for n in range(0, length-1):
hw5_216.py(8):         print( symb + symb2*(width-2) + symb)
$###$
hw5_216.py(7):     for n in range(0, length-1):
hw5_216.py(9):     print(symb * width)
$$$$$
 --- modulename: trace, funcname: _unsettrace
trace.py(77):         sys.settrace(None)
