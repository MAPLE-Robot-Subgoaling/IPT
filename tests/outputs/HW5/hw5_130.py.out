 --- modulename: hw5_130, funcname: <module>
hw5_130.py(1): def main():
hw5_130.py(14): main()
 --- modulename: hw5_130, funcname: main
hw5_130.py(2):     width = int(input("Please enter the width of the box: "))
Please enter the width of the box:  --- modulename: codecs, funcname: getstate
codecs.py(332):         return (self.buffer, 0)
 --- modulename: codecs, funcname: decode
codecs.py(320):         data = self.buffer + input
codecs.py(321):         (result, consumed) = self._buffer_decode(data, self.errors, final)
codecs.py(323):         self.buffer = data[consumed:]
codecs.py(324):         return result
hw5_130.py(3):     height = int(input("Please enter the height of the box: "))
Please enter the height of the box: hw5_130.py(4):     out = input("Please enter the symbol the box will be outlined in: ")
Please enter the symbol the box will be outlined in: hw5_130.py(5):     fill = input("Please enter the symbol the box will be filled in with: ")
Please enter the symbol the box will be filled in with:  --- modulename: codecs, funcname: getstate
codecs.py(332):         return (self.buffer, 0)
 --- modulename: codecs, funcname: decode
codecs.py(320):         data = self.buffer + input
codecs.py(321):         (result, consumed) = self._buffer_decode(data, self.errors, final)
codecs.py(323):         self.buffer = data[consumed:]
codecs.py(324):         return result
hw5_130.py(6):     for h in range(height, 0, -1):
hw5_130.py(7):         if h == height:
hw5_130.py(8):             print(width*out)
$$$$$
hw5_130.py(9):         if h > 1 and h < height:
hw5_130.py(12):         if h == 1:
hw5_130.py(6):     for h in range(height, 0, -1):
hw5_130.py(7):         if h == height:
hw5_130.py(9):         if h > 1 and h < height:
hw5_130.py(10):             truWidth  = width-2
hw5_130.py(11):             print(out+truWidth*fill+out)
$###$
hw5_130.py(12):         if h == 1:
hw5_130.py(6):     for h in range(height, 0, -1):
hw5_130.py(7):         if h == height:
hw5_130.py(9):         if h > 1 and h < height:
hw5_130.py(10):             truWidth  = width-2
hw5_130.py(11):             print(out+truWidth*fill+out)
$###$
hw5_130.py(12):         if h == 1:
hw5_130.py(6):     for h in range(height, 0, -1):
hw5_130.py(7):         if h == height:
hw5_130.py(9):         if h > 1 and h < height:
hw5_130.py(10):             truWidth  = width-2
hw5_130.py(11):             print(out+truWidth*fill+out)
$###$
hw5_130.py(12):         if h == 1:
hw5_130.py(6):     for h in range(height, 0, -1):
hw5_130.py(7):         if h == height:
hw5_130.py(9):         if h > 1 and h < height:
hw5_130.py(12):         if h == 1:
hw5_130.py(13):             print(width*out)
$$$$$
hw5_130.py(6):     for h in range(height, 0, -1):
 --- modulename: trace, funcname: _unsettrace
trace.py(77):         sys.settrace(None)
