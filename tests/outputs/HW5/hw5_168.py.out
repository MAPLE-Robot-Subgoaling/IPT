 --- modulename: hw5_168, funcname: <module>
hw5_168.py(1): def main():
hw5_168.py(11): main()
 --- modulename: hw5_168, funcname: main
hw5_168.py(2):     width = int(input("Please enter the width of your box: "))
Please enter the width of your box:  --- modulename: codecs, funcname: getstate
codecs.py(332):         return (self.buffer, 0)
 --- modulename: codecs, funcname: decode
codecs.py(320):         data = self.buffer + input
codecs.py(321):         (result, consumed) = self._buffer_decode(data, self.errors, final)
codecs.py(323):         self.buffer = data[consumed:]
codecs.py(324):         return result
hw5_168.py(3):     height = int(input("Please enter the height of your box: "))
Please enter the height of your box: hw5_168.py(4):     outline = input("Please enter the symbol of your outline: ")
Please enter the symbol of your outline: hw5_168.py(5):     filling = input("Please enter the symbol for your filling: ")
Please enter the symbol for your filling:  --- modulename: codecs, funcname: getstate
codecs.py(332):         return (self.buffer, 0)
 --- modulename: codecs, funcname: decode
codecs.py(320):         data = self.buffer + input
codecs.py(321):         (result, consumed) = self._buffer_decode(data, self.errors, final)
codecs.py(323):         self.buffer = data[consumed:]
codecs.py(324):         return result
hw5_168.py(6):     for n in range(1,height + 1):
hw5_168.py(7):         if n == 1  or  n == height:
hw5_168.py(8):             print(outline * width)
$$$$$
hw5_168.py(6):     for n in range(1,height + 1):
hw5_168.py(7):         if n == 1  or  n == height:
hw5_168.py(10):             print(outline + filling * (width - 2) + outline)
$###$
hw5_168.py(6):     for n in range(1,height + 1):
hw5_168.py(7):         if n == 1  or  n == height:
hw5_168.py(10):             print(outline + filling * (width - 2) + outline)
$###$
hw5_168.py(6):     for n in range(1,height + 1):
hw5_168.py(7):         if n == 1  or  n == height:
hw5_168.py(10):             print(outline + filling * (width - 2) + outline)
$###$
hw5_168.py(6):     for n in range(1,height + 1):
hw5_168.py(7):         if n == 1  or  n == height:
hw5_168.py(8):             print(outline * width)
$$$$$
hw5_168.py(6):     for n in range(1,height + 1):
 --- modulename: trace, funcname: _unsettrace
trace.py(77):         sys.settrace(None)
