 --- modulename: hw5_478, funcname: <module>
hw5_478.py(1): def main():
hw5_478.py(11): main()
 --- modulename: hw5_478, funcname: main
hw5_478.py(2):     width = int(input("Enter the width of the box: "))
Enter the width of the box:  --- modulename: codecs, funcname: getstate
codecs.py(332):         return (self.buffer, 0)
 --- modulename: codecs, funcname: decode
codecs.py(320):         data = self.buffer + input
codecs.py(321):         (result, consumed) = self._buffer_decode(data, self.errors, final)
codecs.py(323):         self.buffer = data[consumed:]
codecs.py(324):         return result
hw5_478.py(3):     length = int(input("Enter the length of the box: "))
Enter the length of the box: hw5_478.py(4):     outlineSym = input("Enter the symbol that will outline the box: ")
Enter the symbol that will outline the box: hw5_478.py(5):     fillSym = input("Enter the symbol that will fill the box: ")
Enter the symbol that will fill the box:  --- modulename: codecs, funcname: getstate
codecs.py(332):         return (self.buffer, 0)
 --- modulename: codecs, funcname: decode
codecs.py(320):         data = self.buffer + input
codecs.py(321):         (result, consumed) = self._buffer_decode(data, self.errors, final)
codecs.py(323):         self.buffer = data[consumed:]
codecs.py(324):         return result
hw5_478.py(6):     for i in range(length):
hw5_478.py(7):         if (i < (length - 1)) and (i > 0):
hw5_478.py(10):             print(outlineSym * width)
$$$$$
hw5_478.py(6):     for i in range(length):
hw5_478.py(7):         if (i < (length - 1)) and (i > 0):
hw5_478.py(8):             print(outlineSym + (fillSym * (width - 2)) + outlineSym)
$###$
hw5_478.py(6):     for i in range(length):
hw5_478.py(7):         if (i < (length - 1)) and (i > 0):
hw5_478.py(8):             print(outlineSym + (fillSym * (width - 2)) + outlineSym)
$###$
hw5_478.py(6):     for i in range(length):
hw5_478.py(7):         if (i < (length - 1)) and (i > 0):
hw5_478.py(8):             print(outlineSym + (fillSym * (width - 2)) + outlineSym)
$###$
hw5_478.py(6):     for i in range(length):
hw5_478.py(7):         if (i < (length - 1)) and (i > 0):
hw5_478.py(10):             print(outlineSym * width)
$$$$$
hw5_478.py(6):     for i in range(length):
 --- modulename: trace, funcname: _unsettrace
trace.py(77):         sys.settrace(None)
