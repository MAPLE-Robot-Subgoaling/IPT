 --- modulename: hw5_430, funcname: <module>
hw5_430.py(1): def main():
hw5_430.py(13): main()
 --- modulename: hw5_430, funcname: main
hw5_430.py(2):     width = int(input("Pease enter the width of the box: "))
Pease enter the width of the box:  --- modulename: codecs, funcname: getstate
codecs.py(332):         return (self.buffer, 0)
 --- modulename: codecs, funcname: decode
codecs.py(320):         data = self.buffer + input
codecs.py(321):         (result, consumed) = self._buffer_decode(data, self.errors, final)
codecs.py(323):         self.buffer = data[consumed:]
codecs.py(324):         return result
hw5_430.py(3):     height = int(input("Please enter the height of the box: "))
Please enter the height of the box: hw5_430.py(4):     outline = input("Please enter the symbol for the box outline: ")
Please enter the symbol for the box outline: hw5_430.py(5):     fill = input("Pease enter a symbol for the box fill: ")
Pease enter a symbol for the box fill:  --- modulename: codecs, funcname: getstate
codecs.py(332):         return (self.buffer, 0)
 --- modulename: codecs, funcname: decode
codecs.py(320):         data = self.buffer + input
codecs.py(321):         (result, consumed) = self._buffer_decode(data, self.errors, final)
codecs.py(323):         self.buffer = data[consumed:]
codecs.py(324):         return result
hw5_430.py(6):     if height != 1:
hw5_430.py(7):         print(width *outline)
$$$$$
hw5_430.py(8):         for i in range(0, height -2):
hw5_430.py(9):             print(outline + fill*(width-2) + outline)
$###$
hw5_430.py(8):         for i in range(0, height -2):
hw5_430.py(9):             print(outline + fill*(width-2) + outline)
$###$
hw5_430.py(8):         for i in range(0, height -2):
hw5_430.py(9):             print(outline + fill*(width-2) + outline)
$###$
hw5_430.py(8):         for i in range(0, height -2):
hw5_430.py(10):         print(width * outline)
$$$$$
hw5_430.py(11):     if width == 1 and height == 1:
 --- modulename: trace, funcname: _unsettrace
trace.py(77):         sys.settrace(None)
