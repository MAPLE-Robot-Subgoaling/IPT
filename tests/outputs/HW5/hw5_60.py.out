 --- modulename: hw5_60, funcname: <module>
hw5_60.py(1): def main():
hw5_60.py(11): main()
 --- modulename: hw5_60, funcname: main
hw5_60.py(2):     width = int(input("Please enter the width of the box: "))
Please enter the width of the box:  --- modulename: codecs, funcname: getstate
codecs.py(332):         return (self.buffer, 0)
 --- modulename: codecs, funcname: decode
codecs.py(320):         data = self.buffer + input
codecs.py(321):         (result, consumed) = self._buffer_decode(data, self.errors, final)
codecs.py(323):         self.buffer = data[consumed:]
codecs.py(324):         return result
hw5_60.py(3):     height = int(input("Please enter the height of the box: "))
Please enter the height of the box: hw5_60.py(4):     symbol = input("Please enter a symbol for the box outline: ")
Please enter a symbol for the box outline: hw5_60.py(5):     fill = input("Please enter a symbol for the box fill: ")
Please enter a symbol for the box fill:  --- modulename: codecs, funcname: getstate
codecs.py(332):         return (self.buffer, 0)
 --- modulename: codecs, funcname: decode
codecs.py(320):         data = self.buffer + input
codecs.py(321):         (result, consumed) = self._buffer_decode(data, self.errors, final)
codecs.py(323):         self.buffer = data[consumed:]
codecs.py(324):         return result
hw5_60.py(6):     for heightCount in range(height):
hw5_60.py(7):         if heightCount == 0 or heightCount == (height - 1):
hw5_60.py(8):             print(symbol * width)
$$$$$
hw5_60.py(6):     for heightCount in range(height):
hw5_60.py(7):         if heightCount == 0 or heightCount == (height - 1):
hw5_60.py(10):             print(symbol + fill * (width - 2) + symbol)
$###$
hw5_60.py(6):     for heightCount in range(height):
hw5_60.py(7):         if heightCount == 0 or heightCount == (height - 1):
hw5_60.py(10):             print(symbol + fill * (width - 2) + symbol)
$###$
hw5_60.py(6):     for heightCount in range(height):
hw5_60.py(7):         if heightCount == 0 or heightCount == (height - 1):
hw5_60.py(10):             print(symbol + fill * (width - 2) + symbol)
$###$
hw5_60.py(6):     for heightCount in range(height):
hw5_60.py(7):         if heightCount == 0 or heightCount == (height - 1):
hw5_60.py(8):             print(symbol * width)
$$$$$
hw5_60.py(6):     for heightCount in range(height):
 --- modulename: trace, funcname: _unsettrace
trace.py(77):         sys.settrace(None)
