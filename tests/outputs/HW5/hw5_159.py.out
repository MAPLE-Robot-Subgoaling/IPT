 --- modulename: hw5_159, funcname: <module>
hw5_159.py(1): def main():
hw5_159.py(12): main()
 --- modulename: hw5_159, funcname: main
hw5_159.py(2):     print ("This program will create a box.")
This program will create a box.
hw5_159.py(3):     boxWidth = int(input("Please enter the width of the box: "))
Please enter the width of the box:  --- modulename: codecs, funcname: getstate
codecs.py(332):         return (self.buffer, 0)
 --- modulename: codecs, funcname: decode
codecs.py(320):         data = self.buffer + input
codecs.py(321):         (result, consumed) = self._buffer_decode(data, self.errors, final)
codecs.py(323):         self.buffer = data[consumed:]
codecs.py(324):         return result
hw5_159.py(4):     boxHeight = int(input("Please enter the height of the box: "))
Please enter the height of the box: hw5_159.py(5):     outlineSym = str(input("Please enter the symbol for the box outline: "))
Please enter the symbol for the box outline: hw5_159.py(6):     fillSym = str(input("Please enter the symbol for the box fill: "))
Please enter the symbol for the box fill:  --- modulename: codecs, funcname: getstate
codecs.py(332):         return (self.buffer, 0)
 --- modulename: codecs, funcname: decode
codecs.py(320):         data = self.buffer + input
codecs.py(321):         (result, consumed) = self._buffer_decode(data, self.errors, final)
codecs.py(323):         self.buffer = data[consumed:]
codecs.py(324):         return result
hw5_159.py(7):     for h in range(boxHeight):
hw5_159.py(8):         if h == 0 or h == (boxHeight -1):
hw5_159.py(9):             print(boxWidth * outlineSym)
^^^^^^^^
hw5_159.py(7):     for h in range(boxHeight):
hw5_159.py(8):         if h == 0 or h == (boxHeight -1):
hw5_159.py(11):             print(outlineSym + (fillSym * (boxWidth - 2)) + outlineSym)
^@@@@@@^
hw5_159.py(7):     for h in range(boxHeight):
hw5_159.py(8):         if h == 0 or h == (boxHeight -1):
hw5_159.py(11):             print(outlineSym + (fillSym * (boxWidth - 2)) + outlineSym)
^@@@@@@^
hw5_159.py(7):     for h in range(boxHeight):
hw5_159.py(8):         if h == 0 or h == (boxHeight -1):
hw5_159.py(11):             print(outlineSym + (fillSym * (boxWidth - 2)) + outlineSym)
^@@@@@@^
hw5_159.py(7):     for h in range(boxHeight):
hw5_159.py(8):         if h == 0 or h == (boxHeight -1):
hw5_159.py(9):             print(boxWidth * outlineSym)
^^^^^^^^
hw5_159.py(7):     for h in range(boxHeight):
 --- modulename: trace, funcname: _unsettrace
trace.py(77):         sys.settrace(None)
