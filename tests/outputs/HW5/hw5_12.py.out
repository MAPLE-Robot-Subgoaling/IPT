 --- modulename: hw5_12, funcname: <module>
hw5_12.py(1): def main():
hw5_12.py(11): main()
 --- modulename: hw5_12, funcname: main
hw5_12.py(2):     boxLen = eval(input("Please enter the width of the box: "))
Please enter the width of the box:  --- modulename: codecs, funcname: getstate
codecs.py(332):         return (self.buffer, 0)
 --- modulename: codecs, funcname: decode
codecs.py(320):         data = self.buffer + input
codecs.py(321):         (result, consumed) = self._buffer_decode(data, self.errors, final)
codecs.py(323):         self.buffer = data[consumed:]
codecs.py(324):         return result
 --- modulename: hw5_12, funcname: <module>
<string>(1): hw5_12.py(3):     boxWid = eval(input("Please enter the height of the box: "))
Please enter the height of the box:  --- modulename: hw5_12, funcname: <module>
<string>(1): hw5_12.py(4):     boxBorder = input("Please enter a symbol for the box outline: ")
Please enter a symbol for the box outline: hw5_12.py(5):     boxFill = input("Please enter a symbol for the box fill: ")
Please enter a symbol for the box fill:  --- modulename: codecs, funcname: getstate
codecs.py(332):         return (self.buffer, 0)
 --- modulename: codecs, funcname: decode
codecs.py(320):         data = self.buffer + input
codecs.py(321):         (result, consumed) = self._buffer_decode(data, self.errors, final)
codecs.py(323):         self.buffer = data[consumed:]
codecs.py(324):         return result
hw5_12.py(6):     for i in range(boxLen):
hw5_12.py(7):         if (i == 0 or i == (boxLen - 1)):
hw5_12.py(8):             print((boxBorder + "") * boxWid)
$$$$$
hw5_12.py(6):     for i in range(boxLen):
hw5_12.py(7):         if (i == 0 or i == (boxLen - 1)):
hw5_12.py(10):             print(boxBorder , boxFill* (boxWid - 2)  , boxBorder)
$ ### $
hw5_12.py(6):     for i in range(boxLen):
hw5_12.py(7):         if (i == 0 or i == (boxLen - 1)):
hw5_12.py(10):             print(boxBorder , boxFill* (boxWid - 2)  , boxBorder)
$ ### $
hw5_12.py(6):     for i in range(boxLen):
hw5_12.py(7):         if (i == 0 or i == (boxLen - 1)):
hw5_12.py(10):             print(boxBorder , boxFill* (boxWid - 2)  , boxBorder)
$ ### $
hw5_12.py(6):     for i in range(boxLen):
hw5_12.py(7):         if (i == 0 or i == (boxLen - 1)):
hw5_12.py(8):             print((boxBorder + "") * boxWid)
$$$$$
hw5_12.py(6):     for i in range(boxLen):
 --- modulename: trace, funcname: _unsettrace
trace.py(77):         sys.settrace(None)
