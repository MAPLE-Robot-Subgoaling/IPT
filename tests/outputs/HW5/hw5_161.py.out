 --- modulename: hw5_161, funcname: <module>
hw5_161.py(1): def main():
hw5_161.py(11): main()
 --- modulename: hw5_161, funcname: main
hw5_161.py(2):     width = int(input("Please enter the width of the box:"))
Please enter the width of the box: --- modulename: codecs, funcname: getstate
codecs.py(332):         return (self.buffer, 0)
 --- modulename: codecs, funcname: decode
codecs.py(320):         data = self.buffer + input
codecs.py(321):         (result, consumed) = self._buffer_decode(data, self.errors, final)
codecs.py(323):         self.buffer = data[consumed:]
codecs.py(324):         return result
hw5_161.py(3):     height = int(input("Please enter the height of the box:"))
Please enter the height of the box:hw5_161.py(4):     symbolOutline = input("Please enter a symbol for the box outline:")
Please enter a symbol for the box outline:hw5_161.py(5):     symbolFill = input("Please enter a symbol for the box fill:")
Please enter a symbol for the box fill: --- modulename: codecs, funcname: getstate
codecs.py(332):         return (self.buffer, 0)
 --- modulename: codecs, funcname: decode
codecs.py(320):         data = self.buffer + input
codecs.py(321):         (result, consumed) = self._buffer_decode(data, self.errors, final)
codecs.py(323):         self.buffer = data[consumed:]
codecs.py(324):         return result
hw5_161.py(6):     if width > 1 : 
hw5_161.py(7):         print(width * symbolOutline)
$$$$$
hw5_161.py(8):     for i in range(height-2):
hw5_161.py(9):         print(symbolOutline + symbolFill * (width - 2) + symbolOutline)
$###$
hw5_161.py(8):     for i in range(height-2):
hw5_161.py(9):         print(symbolOutline + symbolFill * (width - 2) + symbolOutline)
$###$
hw5_161.py(8):     for i in range(height-2):
hw5_161.py(9):         print(symbolOutline + symbolFill * (width - 2) + symbolOutline)
$###$
hw5_161.py(8):     for i in range(height-2):
hw5_161.py(10):     print(width * symbolOutline)
$$$$$
 --- modulename: trace, funcname: _unsettrace
trace.py(77):         sys.settrace(None)
