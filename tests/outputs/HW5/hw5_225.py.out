 --- modulename: hw5_225, funcname: <module>
hw5_225.py(1): def main():
hw5_225.py(20): main()
 --- modulename: hw5_225, funcname: main
hw5_225.py(2):     width = int(input("What do you want the width of the box to be? "))
What do you want the width of the box to be?  --- modulename: codecs, funcname: getstate
codecs.py(332):         return (self.buffer, 0)
 --- modulename: codecs, funcname: decode
codecs.py(320):         data = self.buffer + input
codecs.py(321):         (result, consumed) = self._buffer_decode(data, self.errors, final)
codecs.py(323):         self.buffer = data[consumed:]
codecs.py(324):         return result
hw5_225.py(3):     height = int(input("What do you want the height of the box to be? "))
What do you want the height of the box to be? hw5_225.py(4):     outline = str(input("Enter the symbol you want the outline to be: "))
Enter the symbol you want the outline to be: hw5_225.py(5):     fill = str(input("Enter the symbol you want the filling of the box to be: "))
Enter the symbol you want the filling of the box to be:  --- modulename: codecs, funcname: getstate
codecs.py(332):         return (self.buffer, 0)
 --- modulename: codecs, funcname: decode
codecs.py(320):         data = self.buffer + input
codecs.py(321):         (result, consumed) = self._buffer_decode(data, self.errors, final)
codecs.py(323):         self.buffer = data[consumed:]
codecs.py(324):         return result
hw5_225.py(6):     print(outline * width)
$$$$$
hw5_225.py(7):     if width > 2 and height != 1:
hw5_225.py(8):         filling = outline + fill *(width - 2) + outline
hw5_225.py(9):         for i in range(0, height - 2):
hw5_225.py(10):             print(filling)
$###$
hw5_225.py(9):         for i in range(0, height - 2):
hw5_225.py(10):             print(filling)
$###$
hw5_225.py(9):         for i in range(0, height - 2):
hw5_225.py(10):             print(filling)
$###$
hw5_225.py(9):         for i in range(0, height - 2):
hw5_225.py(11):     if width > 1 and height != 1:
hw5_225.py(12):         if width == 2:
hw5_225.py(16):             print(outline * width)
$$$$$
hw5_225.py(17):     if width == 1 and height != 1:
 --- modulename: trace, funcname: _unsettrace
trace.py(77):         sys.settrace(None)
