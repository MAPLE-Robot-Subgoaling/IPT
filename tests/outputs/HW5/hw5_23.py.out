 --- modulename: hw5_23, funcname: <module>
hw5_23.py(1): def main():
hw5_23.py(16): main()
 --- modulename: hw5_23, funcname: main
hw5_23.py(2):     PROMPT_WIDTH = "Please enter the width of the box: " 
hw5_23.py(3):     PROMPT_HEIGHT = "Please enter the height of the box: " 
hw5_23.py(4):     PROMPT_OUTLINE = "Please enter a symbol for the box outline: " 
hw5_23.py(5):     PROMPT_FILL = "Please enter a symbol for the box fill: " 
hw5_23.py(6):     width = int(input(PROMPT_WIDTH))
Please enter the width of the box:  --- modulename: codecs, funcname: getstate
codecs.py(332):         return (self.buffer, 0)
 --- modulename: codecs, funcname: decode
codecs.py(320):         data = self.buffer + input
codecs.py(321):         (result, consumed) = self._buffer_decode(data, self.errors, final)
codecs.py(323):         self.buffer = data[consumed:]
codecs.py(324):         return result
hw5_23.py(7):     height = int(input(PROMPT_HEIGHT))
Please enter the height of the box: hw5_23.py(8):     outline = input(PROMPT_OUTLINE)
Please enter a symbol for the box outline: hw5_23.py(9):     fill = input(PROMPT_FILL)
Please enter a symbol for the box fill:  --- modulename: codecs, funcname: getstate
codecs.py(332):         return (self.buffer, 0)
 --- modulename: codecs, funcname: decode
codecs.py(320):         data = self.buffer + input
codecs.py(321):         (result, consumed) = self._buffer_decode(data, self.errors, final)
codecs.py(323):         self.buffer = data[consumed:]
codecs.py(324):         return result
hw5_23.py(10):     for i in range(0, height):
hw5_23.py(11):         if (i == 0 or i == height - 1):
hw5_23.py(12):             line = outline * width
hw5_23.py(15):         print(line)
$$$$$
hw5_23.py(10):     for i in range(0, height):
hw5_23.py(11):         if (i == 0 or i == height - 1):
hw5_23.py(14):             line = outline + fill * (width-2) + outline 
hw5_23.py(15):         print(line)
$###$
hw5_23.py(10):     for i in range(0, height):
hw5_23.py(11):         if (i == 0 or i == height - 1):
hw5_23.py(14):             line = outline + fill * (width-2) + outline 
hw5_23.py(15):         print(line)
$###$
hw5_23.py(10):     for i in range(0, height):
hw5_23.py(11):         if (i == 0 or i == height - 1):
hw5_23.py(14):             line = outline + fill * (width-2) + outline 
hw5_23.py(15):         print(line)
$###$
hw5_23.py(10):     for i in range(0, height):
hw5_23.py(11):         if (i == 0 or i == height - 1):
hw5_23.py(12):             line = outline * width
hw5_23.py(15):         print(line)
$$$$$
hw5_23.py(10):     for i in range(0, height):
 --- modulename: trace, funcname: _unsettrace
trace.py(77):         sys.settrace(None)
