 --- modulename: hw5_317, funcname: <module>
hw5_317.py(1): def main():
hw5_317.py(24): main()
 --- modulename: hw5_317, funcname: main
hw5_317.py(2):     width = int(input("Please enter the width of the box: "))
Please enter the width of the box:  --- modulename: codecs, funcname: getstate
codecs.py(332):         return (self.buffer, 0)
 --- modulename: codecs, funcname: decode
codecs.py(320):         data = self.buffer + input
codecs.py(321):         (result, consumed) = self._buffer_decode(data, self.errors, final)
codecs.py(323):         self.buffer = data[consumed:]
codecs.py(324):         return result
hw5_317.py(3):     height = int(input("Please enter the height of the box: "))
Please enter the height of the box: hw5_317.py(4):     symbol = input("Please enter a symbol for the box perimeter: ")
Please enter a symbol for the box perimeter: hw5_317.py(5):     inner_symbol = input("Please enter a symbol for the box's inside: ")
Please enter a symbol for the box's inside:  --- modulename: codecs, funcname: getstate
codecs.py(332):         return (self.buffer, 0)
 --- modulename: codecs, funcname: decode
codecs.py(320):         data = self.buffer + input
codecs.py(321):         (result, consumed) = self._buffer_decode(data, self.errors, final)
codecs.py(323):         self.buffer = data[consumed:]
codecs.py(324):         return result
hw5_317.py(6):     if width > 1 and height > 1:
hw5_317.py(7):         row1 = symbol * width
hw5_317.py(8):         print(row1)
$$$$$
hw5_317.py(9):         if height >= 2: 
hw5_317.py(10):             for row in range(0, height - 2):
hw5_317.py(11):                 if width > 1:
hw5_317.py(12):                     mid_row = symbol + (inner_symbol * (width - 2)) + symbol
hw5_317.py(13):                     print(mid_row)
$###$
hw5_317.py(10):             for row in range(0, height - 2):
hw5_317.py(11):                 if width > 1:
hw5_317.py(12):                     mid_row = symbol + (inner_symbol * (width - 2)) + symbol
hw5_317.py(13):                     print(mid_row)
$###$
hw5_317.py(10):             for row in range(0, height - 2):
hw5_317.py(11):                 if width > 1:
hw5_317.py(12):                     mid_row = symbol + (inner_symbol * (width - 2)) + symbol
hw5_317.py(13):                     print(mid_row)
$###$
hw5_317.py(10):             for row in range(0, height - 2):
hw5_317.py(17):         row_final = symbol * width
hw5_317.py(18):         print(row_final)
$$$$$
 --- modulename: trace, funcname: _unsettrace
trace.py(77):         sys.settrace(None)
