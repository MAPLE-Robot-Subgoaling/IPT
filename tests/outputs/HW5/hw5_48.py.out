 --- modulename: hw5_48, funcname: <module>
hw5_48.py(1): def main():
hw5_48.py(15): main()
 --- modulename: hw5_48, funcname: main
hw5_48.py(2):     boxWidth = int(input("Please enter the width of the box: "))
Please enter the width of the box:  --- modulename: codecs, funcname: getstate
codecs.py(332):         return (self.buffer, 0)
 --- modulename: codecs, funcname: decode
codecs.py(320):         data = self.buffer + input
codecs.py(321):         (result, consumed) = self._buffer_decode(data, self.errors, final)
codecs.py(323):         self.buffer = data[consumed:]
codecs.py(324):         return result
hw5_48.py(3):     boxHeight = int(input("Please enter the height of the box: "))
Please enter the height of the box: hw5_48.py(4):     boxOutline = input("Please enter a symbol for the box outline: ")
Please enter a symbol for the box outline: hw5_48.py(5):     boxFill = input("Please enter a symbol for the box fill: ")
Please enter a symbol for the box fill:  --- modulename: codecs, funcname: getstate
codecs.py(332):         return (self.buffer, 0)
 --- modulename: codecs, funcname: decode
codecs.py(320):         data = self.buffer + input
codecs.py(321):         (result, consumed) = self._buffer_decode(data, self.errors, final)
codecs.py(323):         self.buffer = data[consumed:]
codecs.py(324):         return result
hw5_48.py(6):     boxHeight = boxHeight - 1
hw5_48.py(7):     boxRange = range(0, (boxHeight + 1))
hw5_48.py(8):     topAndBottom = boxOutline * boxWidth
hw5_48.py(9):     middleOfBox = boxOutline + ((boxWidth - 2) * boxFill) + boxOutline
hw5_48.py(10):     for boxLine in boxRange:
hw5_48.py(11):         if boxLine == 0 or (boxLine == boxHeight and boxHeight != 1) or boxWidth == 1:
hw5_48.py(12):             print(topAndBottom)
$$$$$
hw5_48.py(10):     for boxLine in boxRange:
hw5_48.py(11):         if boxLine == 0 or (boxLine == boxHeight and boxHeight != 1) or boxWidth == 1:
hw5_48.py(13):         elif boxHeight != 1:
hw5_48.py(14):             print(middleOfBox)
$###$
hw5_48.py(10):     for boxLine in boxRange:
hw5_48.py(11):         if boxLine == 0 or (boxLine == boxHeight and boxHeight != 1) or boxWidth == 1:
hw5_48.py(13):         elif boxHeight != 1:
hw5_48.py(14):             print(middleOfBox)
$###$
hw5_48.py(10):     for boxLine in boxRange:
hw5_48.py(11):         if boxLine == 0 or (boxLine == boxHeight and boxHeight != 1) or boxWidth == 1:
hw5_48.py(13):         elif boxHeight != 1:
hw5_48.py(14):             print(middleOfBox)
$###$
hw5_48.py(10):     for boxLine in boxRange:
hw5_48.py(11):         if boxLine == 0 or (boxLine == boxHeight and boxHeight != 1) or boxWidth == 1:
hw5_48.py(12):             print(topAndBottom)
$$$$$
hw5_48.py(10):     for boxLine in boxRange:
 --- modulename: trace, funcname: _unsettrace
trace.py(77):         sys.settrace(None)
