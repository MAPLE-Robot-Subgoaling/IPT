 --- modulename: hw5_347, funcname: <module>
hw5_347.py(1): def main():
hw5_347.py(12): main()
 --- modulename: hw5_347, funcname: main
hw5_347.py(2):     width = int(input("Please enter a width: "))
Please enter a width:  --- modulename: codecs, funcname: getstate
codecs.py(332):         return (self.buffer, 0)
 --- modulename: codecs, funcname: decode
codecs.py(320):         data = self.buffer + input
codecs.py(321):         (result, consumed) = self._buffer_decode(data, self.errors, final)
codecs.py(323):         self.buffer = data[consumed:]
codecs.py(324):         return result
hw5_347.py(3):     height = int(input("Please enter a height: "))
Please enter a height: hw5_347.py(4):     symbol1 = input("Please enter a symbol: ")
Please enter a symbol: hw5_347.py(5):     symbol2 = input("Please enter a different symbol: ")
Please enter a different symbol:  --- modulename: codecs, funcname: getstate
codecs.py(332):         return (self.buffer, 0)
 --- modulename: codecs, funcname: decode
codecs.py(320):         data = self.buffer + input
codecs.py(321):         (result, consumed) = self._buffer_decode(data, self.errors, final)
codecs.py(323):         self.buffer = data[consumed:]
codecs.py(324):         return result
hw5_347.py(6):     length = 0
hw5_347.py(7):     print(symbol1*width)
$$$$$
hw5_347.py(8):     for n in range(height - 2):
hw5_347.py(9):         print(symbol1+(symbol2*(width - 2))+symbol1)
$###$
hw5_347.py(8):     for n in range(height - 2):
hw5_347.py(9):         print(symbol1+(symbol2*(width - 2))+symbol1)
$###$
hw5_347.py(8):     for n in range(height - 2):
hw5_347.py(9):         print(symbol1+(symbol2*(width - 2))+symbol1)
$###$
hw5_347.py(8):     for n in range(height - 2):
hw5_347.py(10):     if height > 1:
hw5_347.py(11):         print(symbol1*width)
$$$$$
 --- modulename: trace, funcname: _unsettrace
trace.py(77):         sys.settrace(None)
