 --- modulename: hw5_112, funcname: <module>
hw5_112.py(1): def main():
hw5_112.py(20): main()
 --- modulename: hw5_112, funcname: main
hw5_112.py(2):     width = int(input("Enter the width of the box: "))
Enter the width of the box:  --- modulename: codecs, funcname: getstate
codecs.py(332):         return (self.buffer, 0)
 --- modulename: codecs, funcname: decode
codecs.py(320):         data = self.buffer + input
codecs.py(321):         (result, consumed) = self._buffer_decode(data, self.errors, final)
codecs.py(323):         self.buffer = data[consumed:]
codecs.py(324):         return result
hw5_112.py(3):     height = int(input("Enter the height of the box: "))
Enter the height of the box: hw5_112.py(4):     outSym = input("Enter a symbol for the box outline: ")
Enter a symbol for the box outline: hw5_112.py(5):     fill = input("Enter a symbol for the box fill: ")
Enter a symbol for the box fill:  --- modulename: codecs, funcname: getstate
codecs.py(332):         return (self.buffer, 0)
 --- modulename: codecs, funcname: decode
codecs.py(320):         data = self.buffer + input
codecs.py(321):         (result, consumed) = self._buffer_decode(data, self.errors, final)
codecs.py(323):         self.buffer = data[consumed:]
codecs.py(324):         return result
hw5_112.py(6):     tbLines = ""
hw5_112.py(7):     for i in range(width):
hw5_112.py(8):         tbLines = tbLines + outSym;
hw5_112.py(7):     for i in range(width):
hw5_112.py(8):         tbLines = tbLines + outSym;
hw5_112.py(7):     for i in range(width):
hw5_112.py(8):         tbLines = tbLines + outSym;
hw5_112.py(7):     for i in range(width):
hw5_112.py(8):         tbLines = tbLines + outSym;
hw5_112.py(7):     for i in range(width):
hw5_112.py(8):         tbLines = tbLines + outSym;
hw5_112.py(7):     for i in range(width):
hw5_112.py(9):     fillLines = ""
hw5_112.py(10):     for i in range(width):
hw5_112.py(11):         if (i == 0 or  i == width - 1):
hw5_112.py(12):             fillLines = fillLines + outSym
hw5_112.py(10):     for i in range(width):
hw5_112.py(11):         if (i == 0 or  i == width - 1):
hw5_112.py(14):             fillLines = fillLines + fill
hw5_112.py(10):     for i in range(width):
hw5_112.py(11):         if (i == 0 or  i == width - 1):
hw5_112.py(14):             fillLines = fillLines + fill
hw5_112.py(10):     for i in range(width):
hw5_112.py(11):         if (i == 0 or  i == width - 1):
hw5_112.py(14):             fillLines = fillLines + fill
hw5_112.py(10):     for i in range(width):
hw5_112.py(11):         if (i == 0 or  i == width - 1):
hw5_112.py(12):             fillLines = fillLines + outSym
hw5_112.py(10):     for i in range(width):
hw5_112.py(15):     for i in range(height):
hw5_112.py(16):         if (i == 0 or i == height - 1):
hw5_112.py(17):             print(tbLines)
$$$$$
hw5_112.py(15):     for i in range(height):
hw5_112.py(16):         if (i == 0 or i == height - 1):
hw5_112.py(19):             print(fillLines)
$###$
hw5_112.py(15):     for i in range(height):
hw5_112.py(16):         if (i == 0 or i == height - 1):
hw5_112.py(19):             print(fillLines)
$###$
hw5_112.py(15):     for i in range(height):
hw5_112.py(16):         if (i == 0 or i == height - 1):
hw5_112.py(19):             print(fillLines)
$###$
hw5_112.py(15):     for i in range(height):
hw5_112.py(16):         if (i == 0 or i == height - 1):
hw5_112.py(17):             print(tbLines)
$$$$$
hw5_112.py(15):     for i in range(height):
 --- modulename: trace, funcname: _unsettrace
trace.py(77):         sys.settrace(None)
