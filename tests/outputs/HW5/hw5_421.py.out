 --- modulename: hw5_421, funcname: <module>
hw5_421.py(1): def main():
hw5_421.py(14): main()
 --- modulename: hw5_421, funcname: main
hw5_421.py(2):     boxWidth = int(input("Please enter the width of the box: "))
Please enter the width of the box:  --- modulename: codecs, funcname: getstate
codecs.py(332):         return (self.buffer, 0)
 --- modulename: codecs, funcname: decode
codecs.py(320):         data = self.buffer + input
codecs.py(321):         (result, consumed) = self._buffer_decode(data, self.errors, final)
codecs.py(323):         self.buffer = data[consumed:]
codecs.py(324):         return result
hw5_421.py(3):     boxHeight = int(input("Please enter the height of the box: "))
Please enter the height of the box: hw5_421.py(4):     symOne = input("Please enter a symbol for the box outline: ")
Please enter a symbol for the box outline: hw5_421.py(5):     symTwo = input("Please enter a symbol for the box fill: ")
Please enter a symbol for the box fill:  --- modulename: codecs, funcname: getstate
codecs.py(332):         return (self.buffer, 0)
 --- modulename: codecs, funcname: decode
codecs.py(320):         data = self.buffer + input
codecs.py(321):         (result, consumed) = self._buffer_decode(data, self.errors, final)
codecs.py(323):         self.buffer = data[consumed:]
codecs.py(324):         return result
hw5_421.py(6):     counter = 0
hw5_421.py(7):     for n in range(0, boxHeight):
hw5_421.py(8):         if (counter == 0 or counter == boxHeight - 1):
hw5_421.py(9):             print(symOne * boxWidth)
$$$$$
hw5_421.py(10):             counter = counter + 1
hw5_421.py(7):     for n in range(0, boxHeight):
hw5_421.py(8):         if (counter == 0 or counter == boxHeight - 1):
hw5_421.py(12):             counter = counter + 1
hw5_421.py(13):             print(symOne + (symTwo * (boxWidth - 2)) + symOne)
$###$
hw5_421.py(7):     for n in range(0, boxHeight):
hw5_421.py(8):         if (counter == 0 or counter == boxHeight - 1):
hw5_421.py(12):             counter = counter + 1
hw5_421.py(13):             print(symOne + (symTwo * (boxWidth - 2)) + symOne)
$###$
hw5_421.py(7):     for n in range(0, boxHeight):
hw5_421.py(8):         if (counter == 0 or counter == boxHeight - 1):
hw5_421.py(12):             counter = counter + 1
hw5_421.py(13):             print(symOne + (symTwo * (boxWidth - 2)) + symOne)
$###$
hw5_421.py(7):     for n in range(0, boxHeight):
hw5_421.py(8):         if (counter == 0 or counter == boxHeight - 1):
hw5_421.py(9):             print(symOne * boxWidth)
$$$$$
hw5_421.py(10):             counter = counter + 1
hw5_421.py(7):     for n in range(0, boxHeight):
 --- modulename: trace, funcname: _unsettrace
trace.py(77):         sys.settrace(None)
