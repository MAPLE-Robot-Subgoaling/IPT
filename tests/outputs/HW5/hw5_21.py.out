 --- modulename: hw5_21, funcname: <module>
hw5_21.py(1): def main():
hw5_21.py(17): main()
 --- modulename: hw5_21, funcname: main
hw5_21.py(2):     width = int(input("Please enter the width of the box: "))
Please enter the width of the box:  --- modulename: codecs, funcname: getstate
codecs.py(332):         return (self.buffer, 0)
 --- modulename: codecs, funcname: decode
codecs.py(320):         data = self.buffer + input
codecs.py(321):         (result, consumed) = self._buffer_decode(data, self.errors, final)
codecs.py(323):         self.buffer = data[consumed:]
codecs.py(324):         return result
hw5_21.py(3):     height = int(input("Please enter the height of the box: "))
Please enter the height of the box: hw5_21.py(4):     symbol_outline = input("Please enter a symbol for the box outline: ")
Please enter a symbol for the box outline: hw5_21.py(5):     symbol_fill = input("Please enter the symbol for the box fill: ")
Please enter the symbol for the box fill:  --- modulename: codecs, funcname: getstate
codecs.py(332):         return (self.buffer, 0)
 --- modulename: codecs, funcname: decode
codecs.py(320):         data = self.buffer + input
codecs.py(321):         (result, consumed) = self._buffer_decode(data, self.errors, final)
codecs.py(323):         self.buffer = data[consumed:]
codecs.py(324):         return result
hw5_21.py(6):     fillspace = " "
hw5_21.py(7):     for h in range(height):
hw5_21.py(8):         if h == 0 or h == height - 1: 
hw5_21.py(9):             print(width * symbol_outline)
$$$$$
hw5_21.py(7):     for h in range(height):
hw5_21.py(8):         if h == 0 or h == height - 1: 
hw5_21.py(11):             print(symbol_outline + fillspace * (width - 2) + symbol_outline)
$   $
hw5_21.py(12):             for w in range(height - 2):
hw5_21.py(13):                 if w == 0 or w == height - 2:
hw5_21.py(14):                     print((width - 2) * symbol_fill)
###
hw5_21.py(12):             for w in range(height - 2):
hw5_21.py(13):                 if w == 0 or w == height - 2:
hw5_21.py(16):                     print(symbol_fill * (width - 4)) 
#
hw5_21.py(12):             for w in range(height - 2):
hw5_21.py(13):                 if w == 0 or w == height - 2:
hw5_21.py(16):                     print(symbol_fill * (width - 4)) 
#
hw5_21.py(12):             for w in range(height - 2):
hw5_21.py(7):     for h in range(height):
hw5_21.py(8):         if h == 0 or h == height - 1: 
hw5_21.py(11):             print(symbol_outline + fillspace * (width - 2) + symbol_outline)
$   $
hw5_21.py(12):             for w in range(height - 2):
hw5_21.py(13):                 if w == 0 or w == height - 2:
hw5_21.py(14):                     print((width - 2) * symbol_fill)
###
hw5_21.py(12):             for w in range(height - 2):
hw5_21.py(13):                 if w == 0 or w == height - 2:
hw5_21.py(16):                     print(symbol_fill * (width - 4)) 
#
hw5_21.py(12):             for w in range(height - 2):
hw5_21.py(13):                 if w == 0 or w == height - 2:
hw5_21.py(16):                     print(symbol_fill * (width - 4)) 
#
hw5_21.py(12):             for w in range(height - 2):
hw5_21.py(7):     for h in range(height):
hw5_21.py(8):         if h == 0 or h == height - 1: 
hw5_21.py(11):             print(symbol_outline + fillspace * (width - 2) + symbol_outline)
$   $
hw5_21.py(12):             for w in range(height - 2):
hw5_21.py(13):                 if w == 0 or w == height - 2:
hw5_21.py(14):                     print((width - 2) * symbol_fill)
###
hw5_21.py(12):             for w in range(height - 2):
hw5_21.py(13):                 if w == 0 or w == height - 2:
hw5_21.py(16):                     print(symbol_fill * (width - 4)) 
#
hw5_21.py(12):             for w in range(height - 2):
hw5_21.py(13):                 if w == 0 or w == height - 2:
hw5_21.py(16):                     print(symbol_fill * (width - 4)) 
#
hw5_21.py(12):             for w in range(height - 2):
hw5_21.py(7):     for h in range(height):
hw5_21.py(8):         if h == 0 or h == height - 1: 
hw5_21.py(9):             print(width * symbol_outline)
$$$$$
hw5_21.py(7):     for h in range(height):
 --- modulename: trace, funcname: _unsettrace
trace.py(77):         sys.settrace(None)
