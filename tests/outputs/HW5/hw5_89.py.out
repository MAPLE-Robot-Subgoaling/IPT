 --- modulename: hw5_89, funcname: <module>
hw5_89.py(1): def main():
hw5_89.py(13): main()
 --- modulename: hw5_89, funcname: main
hw5_89.py(2):     width = int(input("Enter box width: "))
Enter box width:  --- modulename: codecs, funcname: getstate
codecs.py(332):         return (self.buffer, 0)
 --- modulename: codecs, funcname: decode
codecs.py(320):         data = self.buffer + input
codecs.py(321):         (result, consumed) = self._buffer_decode(data, self.errors, final)
codecs.py(323):         self.buffer = data[consumed:]
codecs.py(324):         return result
hw5_89.py(3):     height = int(input("Enter box height: "))
Enter box height: hw5_89.py(4):     outChar = input("Enter box outline character: ")
Enter box outline character: hw5_89.py(5):     fillChar = input("Enter box fill character: ")
Enter box fill character:  --- modulename: codecs, funcname: getstate
codecs.py(332):         return (self.buffer, 0)
 --- modulename: codecs, funcname: decode
codecs.py(320):         data = self.buffer + input
codecs.py(321):         (result, consumed) = self._buffer_decode(data, self.errors, final)
codecs.py(323):         self.buffer = data[consumed:]
codecs.py(324):         return result
hw5_89.py(6):     for n in range(height):
hw5_89.py(7):         boxLine = ""
hw5_89.py(8):         if n == 0 or n == height - 1:
hw5_89.py(9):             boxLine = outChar * width
hw5_89.py(12):         print(boxLine)
$$$$$
hw5_89.py(6):     for n in range(height):
hw5_89.py(7):         boxLine = ""
hw5_89.py(8):         if n == 0 or n == height - 1:
hw5_89.py(11):             boxLine = outChar + fillChar * (width - 2) + outChar
hw5_89.py(12):         print(boxLine)
$###$
hw5_89.py(6):     for n in range(height):
hw5_89.py(7):         boxLine = ""
hw5_89.py(8):         if n == 0 or n == height - 1:
hw5_89.py(11):             boxLine = outChar + fillChar * (width - 2) + outChar
hw5_89.py(12):         print(boxLine)
$###$
hw5_89.py(6):     for n in range(height):
hw5_89.py(7):         boxLine = ""
hw5_89.py(8):         if n == 0 or n == height - 1:
hw5_89.py(11):             boxLine = outChar + fillChar * (width - 2) + outChar
hw5_89.py(12):         print(boxLine)
$###$
hw5_89.py(6):     for n in range(height):
hw5_89.py(7):         boxLine = ""
hw5_89.py(8):         if n == 0 or n == height - 1:
hw5_89.py(9):             boxLine = outChar * width
hw5_89.py(12):         print(boxLine)
$$$$$
hw5_89.py(6):     for n in range(height):
 --- modulename: trace, funcname: _unsettrace
trace.py(77):         sys.settrace(None)
