 --- modulename: hw5_329, funcname: <module>
hw5_329.py(1): def main():
hw5_329.py(13): main()
 --- modulename: hw5_329, funcname: main
hw5_329.py(2):     width = int(input("Width of box: "))
Width of box:  --- modulename: codecs, funcname: getstate
codecs.py(332):         return (self.buffer, 0)
 --- modulename: codecs, funcname: decode
codecs.py(320):         data = self.buffer + input
codecs.py(321):         (result, consumed) = self._buffer_decode(data, self.errors, final)
codecs.py(323):         self.buffer = data[consumed:]
codecs.py(324):         return result
hw5_329.py(3):     height = int(input("Height of box: "))
Height of box: hw5_329.py(4):     outline = input("Enter symbol for outline: ")
Enter symbol for outline: hw5_329.py(5):     fill = input("Enter symbol for fill: ")
Enter symbol for fill:  --- modulename: codecs, funcname: getstate
codecs.py(332):         return (self.buffer, 0)
 --- modulename: codecs, funcname: decode
codecs.py(320):         data = self.buffer + input
codecs.py(321):         (result, consumed) = self._buffer_decode(data, self.errors, final)
codecs.py(323):         self.buffer = data[consumed:]
codecs.py(324):         return result
hw5_329.py(6):     print(outline * width)
$$$$$
hw5_329.py(7):     BORDER = 2
hw5_329.py(8):     if height > BORDER:
hw5_329.py(9):         for f in range(height - BORDER):
hw5_329.py(10):             print (outline + fill * (width - BORDER) + outline)
$###$
hw5_329.py(9):         for f in range(height - BORDER):
hw5_329.py(10):             print (outline + fill * (width - BORDER) + outline)
$###$
hw5_329.py(9):         for f in range(height - BORDER):
hw5_329.py(10):             print (outline + fill * (width - BORDER) + outline)
$###$
hw5_329.py(9):         for f in range(height - BORDER):
hw5_329.py(11):     if height > 1:
hw5_329.py(12):         print(outline * width)
$$$$$
 --- modulename: trace, funcname: _unsettrace
trace.py(77):         sys.settrace(None)
