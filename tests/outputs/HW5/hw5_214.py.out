 --- modulename: hw5_214, funcname: <module>
hw5_214.py(1): def main():
hw5_214.py(19): main()
 --- modulename: hw5_214, funcname: main
hw5_214.py(2):  width =int(input("Enter your desired width:", ))
Enter your desired width: --- modulename: codecs, funcname: getstate
codecs.py(332):         return (self.buffer, 0)
 --- modulename: codecs, funcname: decode
codecs.py(320):         data = self.buffer + input
codecs.py(321):         (result, consumed) = self._buffer_decode(data, self.errors, final)
codecs.py(323):         self.buffer = data[consumed:]
codecs.py(324):         return result
hw5_214.py(3):  height = int(input("Enter your desired height:", ))
Enter your desired height:hw5_214.py(4):  outline = input("Enter your symbol for box outline:", )
Enter your symbol for box outline:hw5_214.py(5):  fill = input("Enter your symbol for the box fill:", )
Enter your symbol for the box fill: --- modulename: codecs, funcname: getstate
codecs.py(332):         return (self.buffer, 0)
 --- modulename: codecs, funcname: decode
codecs.py(320):         data = self.buffer + input
codecs.py(321):         (result, consumed) = self._buffer_decode(data, self.errors, final)
codecs.py(323):         self.buffer = data[consumed:]
codecs.py(324):         return result
hw5_214.py(6):  newwidth = width - 2
hw5_214.py(7):  if width == 1 and height == 1:
hw5_214.py(9):  elif width == 1:
hw5_214.py(15):   print(width * outline)
$$$$$
hw5_214.py(16):   for s in range(height-2):
hw5_214.py(17):    print(outline + fill * newwidth + outline)
$###$
hw5_214.py(16):   for s in range(height-2):
hw5_214.py(17):    print(outline + fill * newwidth + outline)
$###$
hw5_214.py(16):   for s in range(height-2):
hw5_214.py(17):    print(outline + fill * newwidth + outline)
$###$
hw5_214.py(16):   for s in range(height-2):
hw5_214.py(18):   print(width*outline)
$$$$$
 --- modulename: trace, funcname: _unsettrace
trace.py(77):         sys.settrace(None)
