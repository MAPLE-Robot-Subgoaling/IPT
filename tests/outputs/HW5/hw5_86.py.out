 --- modulename: hw5_86, funcname: <module>
hw5_86.py(1): def main():
hw5_86.py(12): main()
 --- modulename: hw5_86, funcname: main
hw5_86.py(2):     width = int(input("Please enter the width of the box: "))
Please enter the width of the box:  --- modulename: codecs, funcname: getstate
codecs.py(332):         return (self.buffer, 0)
 --- modulename: codecs, funcname: decode
codecs.py(320):         data = self.buffer + input
codecs.py(321):         (result, consumed) = self._buffer_decode(data, self.errors, final)
codecs.py(323):         self.buffer = data[consumed:]
codecs.py(324):         return result
hw5_86.py(3):     height = int(input("Please enter the height of the box: "))
Please enter the height of the box: hw5_86.py(4):     outline = list(str(input("Please enter a symbol for the box outline: ")))
Please enter a symbol for the box outline: hw5_86.py(5):     fill = str(input("Please enter a symbol for the box fill: "))
Please enter a symbol for the box fill:  --- modulename: codecs, funcname: getstate
codecs.py(332):         return (self.buffer, 0)
 --- modulename: codecs, funcname: decode
codecs.py(320):         data = self.buffer + input
codecs.py(321):         (result, consumed) = self._buffer_decode(data, self.errors, final)
codecs.py(323):         self.buffer = data[consumed:]
codecs.py(324):         return result
hw5_86.py(6):     if width == 1  and height == 1:
hw5_86.py(8):     for i in outline:
hw5_86.py(9):         print(i * width)
$$$$$
hw5_86.py(10):         print(((i + (fill * (width - 2)) + i) + '\n') * (height - 2))
$###$
$###$
$###$

hw5_86.py(11):         print(i * width)
$$$$$
hw5_86.py(8):     for i in outline:
 --- modulename: trace, funcname: _unsettrace
trace.py(77):         sys.settrace(None)
