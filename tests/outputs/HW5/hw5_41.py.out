 --- modulename: hw5_41, funcname: <module>
hw5_41.py(1): def main():
hw5_41.py(19): main()
 --- modulename: hw5_41, funcname: main
hw5_41.py(2):     print("It's time to draw a box!")
It's time to draw a box!
hw5_41.py(3):     boxWidth = int(input("How wide should it be? >"))
How wide should it be? > --- modulename: codecs, funcname: getstate
codecs.py(332):         return (self.buffer, 0)
 --- modulename: codecs, funcname: decode
codecs.py(320):         data = self.buffer + input
codecs.py(321):         (result, consumed) = self._buffer_decode(data, self.errors, final)
codecs.py(323):         self.buffer = data[consumed:]
codecs.py(324):         return result
hw5_41.py(4):     boxHeight = int(input("And how tall? >"))
And how tall? >hw5_41.py(5):     symOutline = input("What symbol should I outline the box with? >")
What symbol should I outline the box with? >hw5_41.py(6):     symFill = input("What symbol should I use to fill it in? >")
What symbol should I use to fill it in? > --- modulename: codecs, funcname: getstate
codecs.py(332):         return (self.buffer, 0)
 --- modulename: codecs, funcname: decode
codecs.py(320):         data = self.buffer + input
codecs.py(321):         (result, consumed) = self._buffer_decode(data, self.errors, final)
codecs.py(323):         self.buffer = data[consumed:]
codecs.py(324):         return result
hw5_41.py(7):     fullLine = ""
hw5_41.py(8):     for h in range(boxWidth):
hw5_41.py(9):         fullLine = fullLine + symOutline
hw5_41.py(8):     for h in range(boxWidth):
hw5_41.py(9):         fullLine = fullLine + symOutline
hw5_41.py(8):     for h in range(boxWidth):
hw5_41.py(9):         fullLine = fullLine + symOutline
hw5_41.py(8):     for h in range(boxWidth):
hw5_41.py(9):         fullLine = fullLine + symOutline
hw5_41.py(8):     for h in range(boxWidth):
hw5_41.py(9):         fullLine = fullLine + symOutline
hw5_41.py(8):     for h in range(boxWidth):
hw5_41.py(9):         fullLine = fullLine + symOutline
hw5_41.py(8):     for h in range(boxWidth):
hw5_41.py(9):         fullLine = fullLine + symOutline
hw5_41.py(8):     for h in range(boxWidth):
hw5_41.py(9):         fullLine = fullLine + symOutline
hw5_41.py(8):     for h in range(boxWidth):
hw5_41.py(10):     fillerLine = symOutline
hw5_41.py(11):     for i in range(boxWidth - 2):
hw5_41.py(12):         fillerLine = fillerLine + symFill
hw5_41.py(11):     for i in range(boxWidth - 2):
hw5_41.py(12):         fillerLine = fillerLine + symFill
hw5_41.py(11):     for i in range(boxWidth - 2):
hw5_41.py(12):         fillerLine = fillerLine + symFill
hw5_41.py(11):     for i in range(boxWidth - 2):
hw5_41.py(12):         fillerLine = fillerLine + symFill
hw5_41.py(11):     for i in range(boxWidth - 2):
hw5_41.py(12):         fillerLine = fillerLine + symFill
hw5_41.py(11):     for i in range(boxWidth - 2):
hw5_41.py(12):         fillerLine = fillerLine + symFill
hw5_41.py(11):     for i in range(boxWidth - 2):
hw5_41.py(13):     fillerLine = fillerLine + symOutline
hw5_41.py(14):     for j in range(boxHeight):
hw5_41.py(15):         if j == 0 or j == boxHeight - 1:
hw5_41.py(16):             print(fullLine)
^^^^^^^^
hw5_41.py(14):     for j in range(boxHeight):
hw5_41.py(15):         if j == 0 or j == boxHeight - 1:
hw5_41.py(18):             print(fillerLine)
^@@@@@@^
hw5_41.py(14):     for j in range(boxHeight):
hw5_41.py(15):         if j == 0 or j == boxHeight - 1:
hw5_41.py(18):             print(fillerLine)
^@@@@@@^
hw5_41.py(14):     for j in range(boxHeight):
hw5_41.py(15):         if j == 0 or j == boxHeight - 1:
hw5_41.py(18):             print(fillerLine)
^@@@@@@^
hw5_41.py(14):     for j in range(boxHeight):
hw5_41.py(15):         if j == 0 or j == boxHeight - 1:
hw5_41.py(16):             print(fullLine)
^^^^^^^^
hw5_41.py(14):     for j in range(boxHeight):
 --- modulename: trace, funcname: _unsettrace
trace.py(77):         sys.settrace(None)
