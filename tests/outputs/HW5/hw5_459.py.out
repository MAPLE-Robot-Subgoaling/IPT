 --- modulename: hw5_459, funcname: <module>
hw5_459.py(1): def main():
hw5_459.py(21): main()
 --- modulename: hw5_459, funcname: main
hw5_459.py(2):     box = []
hw5_459.py(3):     lastChar = []
hw5_459.py(4):     myWidth = int(input("Please enter the width of the box: "))
Please enter the width of the box:  --- modulename: codecs, funcname: getstate
codecs.py(332):         return (self.buffer, 0)
 --- modulename: codecs, funcname: decode
codecs.py(320):         data = self.buffer + input
codecs.py(321):         (result, consumed) = self._buffer_decode(data, self.errors, final)
codecs.py(323):         self.buffer = data[consumed:]
codecs.py(324):         return result
hw5_459.py(5):     myHeight = int(input("Please enter the height of the box: "))
Please enter the height of the box: hw5_459.py(6):     outLine = input("Please enter a symbol for the box outline: ")
Please enter a symbol for the box outline: hw5_459.py(7):     fill = input("PLease enter a symbol for the box fill: ")
PLease enter a symbol for the box fill:  --- modulename: codecs, funcname: getstate
codecs.py(332):         return (self.buffer, 0)
 --- modulename: codecs, funcname: decode
codecs.py(320):         data = self.buffer + input
codecs.py(321):         (result, consumed) = self._buffer_decode(data, self.errors, final)
codecs.py(323):         self.buffer = data[consumed:]
codecs.py(324):         return result
hw5_459.py(8):     STOPPER = myWidth - 2
hw5_459.py(9):     for x in range(myHeight - 1):
hw5_459.py(10):         if x == 0:
hw5_459.py(11):             box.append(outLine)
hw5_459.py(9):     for x in range(myHeight - 1):
hw5_459.py(10):         if x == 0:
hw5_459.py(13):             box.append(fill)
hw5_459.py(9):     for x in range(myHeight - 1):
hw5_459.py(10):         if x == 0:
hw5_459.py(13):             box.append(fill)
hw5_459.py(9):     for x in range(myHeight - 1):
hw5_459.py(10):         if x == 0:
hw5_459.py(13):             box.append(fill)
hw5_459.py(9):     for x in range(myHeight - 1):
hw5_459.py(14):     lastChar.append(outLine)
hw5_459.py(15):     box = box + lastChar
hw5_459.py(16):     for a in box:
hw5_459.py(17):         if myWidth == 1:
hw5_459.py(20):             print(outLine + (a * STOPPER) + outLine)
$$$$$
hw5_459.py(16):     for a in box:
hw5_459.py(17):         if myWidth == 1:
hw5_459.py(20):             print(outLine + (a * STOPPER) + outLine)
$###$
hw5_459.py(16):     for a in box:
hw5_459.py(17):         if myWidth == 1:
hw5_459.py(20):             print(outLine + (a * STOPPER) + outLine)
$###$
hw5_459.py(16):     for a in box:
hw5_459.py(17):         if myWidth == 1:
hw5_459.py(20):             print(outLine + (a * STOPPER) + outLine)
$###$
hw5_459.py(16):     for a in box:
hw5_459.py(17):         if myWidth == 1:
hw5_459.py(20):             print(outLine + (a * STOPPER) + outLine)
$$$$$
hw5_459.py(16):     for a in box:
 --- modulename: trace, funcname: _unsettrace
trace.py(77):         sys.settrace(None)
