 --- modulename: hw5_13, funcname: <module>
hw5_13.py(1): def main():
hw5_13.py(18): main()
 --- modulename: hw5_13, funcname: main
hw5_13.py(2):     width = int(input("Please enter the width of the box: "))
Please enter the width of the box:  --- modulename: codecs, funcname: getstate
codecs.py(332):         return (self.buffer, 0)
 --- modulename: codecs, funcname: decode
codecs.py(320):         data = self.buffer + input
codecs.py(321):         (result, consumed) = self._buffer_decode(data, self.errors, final)
codecs.py(323):         self.buffer = data[consumed:]
codecs.py(324):         return result
hw5_13.py(3):     height = int(input("Please enter the height of the box: "))
Please enter the height of the box: hw5_13.py(4):     outline = input("Please enter a symbol for the bow fill: ")
Please enter a symbol for the bow fill: hw5_13.py(5):     fill = input("Please enter a symbol for the box fill: ")
Please enter a symbol for the box fill:  --- modulename: codecs, funcname: getstate
codecs.py(332):         return (self.buffer, 0)
 --- modulename: codecs, funcname: decode
codecs.py(320):         data = self.buffer + input
codecs.py(321):         (result, consumed) = self._buffer_decode(data, self.errors, final)
codecs.py(323):         self.buffer = data[consumed:]
codecs.py(324):         return result
hw5_13.py(6):     line1 = outline + (fill * (width - 2)) + outline
hw5_13.py(7):     midLines = (line1) * (height - 2)
hw5_13.py(8):     middleHeight = [outline] * (height - 2) 
hw5_13.py(9):     print(outline * width)
$$$$$
hw5_13.py(10):     if width == 1:
hw5_13.py(14):         for w in midLines:
hw5_13.py(15):             print(w)
$
hw5_13.py(14):         for w in midLines:
hw5_13.py(15):             print(w)
#
hw5_13.py(14):         for w in midLines:
hw5_13.py(15):             print(w)
#
hw5_13.py(14):         for w in midLines:
hw5_13.py(15):             print(w)
#
hw5_13.py(14):         for w in midLines:
hw5_13.py(15):             print(w)
$
hw5_13.py(14):         for w in midLines:
hw5_13.py(15):             print(w)
$
hw5_13.py(14):         for w in midLines:
hw5_13.py(15):             print(w)
#
hw5_13.py(14):         for w in midLines:
hw5_13.py(15):             print(w)
#
hw5_13.py(14):         for w in midLines:
hw5_13.py(15):             print(w)
#
hw5_13.py(14):         for w in midLines:
hw5_13.py(15):             print(w)
$
hw5_13.py(14):         for w in midLines:
hw5_13.py(15):             print(w)
$
hw5_13.py(14):         for w in midLines:
hw5_13.py(15):             print(w)
#
hw5_13.py(14):         for w in midLines:
hw5_13.py(15):             print(w)
#
hw5_13.py(14):         for w in midLines:
hw5_13.py(15):             print(w)
#
hw5_13.py(14):         for w in midLines:
hw5_13.py(15):             print(w)
$
hw5_13.py(14):         for w in midLines:
hw5_13.py(16):     if height > 1:
hw5_13.py(17):         print(outline * width)
$$$$$
 --- modulename: trace, funcname: _unsettrace
trace.py(77):         sys.settrace(None)
