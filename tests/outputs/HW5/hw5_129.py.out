 --- modulename: hw5_129, funcname: <module>
hw5_129.py(1): def main():
hw5_129.py(14): main()
 --- modulename: hw5_129, funcname: main
hw5_129.py(2):     boxWidth = int(input("Please enter the width of the box: "))
Please enter the width of the box:  --- modulename: codecs, funcname: getstate
codecs.py(332):         return (self.buffer, 0)
 --- modulename: codecs, funcname: decode
codecs.py(320):         data = self.buffer + input
codecs.py(321):         (result, consumed) = self._buffer_decode(data, self.errors, final)
codecs.py(323):         self.buffer = data[consumed:]
codecs.py(324):         return result
hw5_129.py(3):     boxHeight = int(input("Please enter the height of the box: "))
Please enter the height of the box: hw5_129.py(4):     boxOutline = str(input("Please enter a symbol for the box outline: "))
Please enter a symbol for the box outline: hw5_129.py(5):     boxFilling = str(input("Please enter a symbol for the box filling: "))
Please enter a symbol for the box filling:  --- modulename: codecs, funcname: getstate
codecs.py(332):         return (self.buffer, 0)
 --- modulename: codecs, funcname: decode
codecs.py(320):         data = self.buffer + input
codecs.py(321):         (result, consumed) = self._buffer_decode(data, self.errors, final)
codecs.py(323):         self.buffer = data[consumed:]
codecs.py(324):         return result
hw5_129.py(6):     print(boxOutline * boxWidth)
$$$$$
hw5_129.py(7):     for i in range(boxHeight - 2):
hw5_129.py(8):         if (boxWidth > 1):
hw5_129.py(9):             print(boxOutline + (boxFilling *(boxWidth -2)) + boxOutline)
$###$
hw5_129.py(10):         if (boxWidth == 1):
hw5_129.py(7):     for i in range(boxHeight - 2):
hw5_129.py(8):         if (boxWidth > 1):
hw5_129.py(9):             print(boxOutline + (boxFilling *(boxWidth -2)) + boxOutline)
$###$
hw5_129.py(10):         if (boxWidth == 1):
hw5_129.py(7):     for i in range(boxHeight - 2):
hw5_129.py(8):         if (boxWidth > 1):
hw5_129.py(9):             print(boxOutline + (boxFilling *(boxWidth -2)) + boxOutline)
$###$
hw5_129.py(10):         if (boxWidth == 1):
hw5_129.py(7):     for i in range(boxHeight - 2):
hw5_129.py(12):     if (boxHeight > 1):
hw5_129.py(13):         print(boxOutline * boxWidth)
$$$$$
 --- modulename: trace, funcname: _unsettrace
trace.py(77):         sys.settrace(None)
