 --- modulename: hw5_443, funcname: <module>
hw5_443.py(1): def main():
hw5_443.py(17): main()
 --- modulename: hw5_443, funcname: main
hw5_443.py(2):     boxH = []    
hw5_443.py(3):     width = int(input("Please enter the width of the box: "))
Please enter the width of the box:  --- modulename: codecs, funcname: getstate
codecs.py(332):         return (self.buffer, 0)
 --- modulename: codecs, funcname: decode
codecs.py(320):         data = self.buffer + input
codecs.py(321):         (result, consumed) = self._buffer_decode(data, self.errors, final)
codecs.py(323):         self.buffer = data[consumed:]
codecs.py(324):         return result
hw5_443.py(4):     height = int(input("Please enter the height of the box: "))
Please enter the height of the box: hw5_443.py(5):     outline = str(input("Please enter a symbol for the box outline: "))
Please enter a symbol for the box outline: hw5_443.py(6):     fill = str(input("Please enter a symbol for the box fill: "))
Please enter a symbol for the box fill:  --- modulename: codecs, funcname: getstate
codecs.py(332):         return (self.buffer, 0)
 --- modulename: codecs, funcname: decode
codecs.py(320):         data = self.buffer + input
codecs.py(321):         (result, consumed) = self._buffer_decode(data, self.errors, final)
codecs.py(323):         self.buffer = data[consumed:]
codecs.py(324):         return result
hw5_443.py(7):     FILLING = 2
hw5_443.py(8):     STOPPER = 1
hw5_443.py(9):     print(outline * width)
$$$$$
hw5_443.py(10):     while height != FILLING and height >= FILLING:
hw5_443.py(11):         boxH.append(height)
hw5_443.py(12):         height = (height - STOPPER)
hw5_443.py(10):     while height != FILLING and height >= FILLING:
hw5_443.py(11):         boxH.append(height)
hw5_443.py(12):         height = (height - STOPPER)
hw5_443.py(10):     while height != FILLING and height >= FILLING:
hw5_443.py(11):         boxH.append(height)
hw5_443.py(12):         height = (height - STOPPER)
hw5_443.py(10):     while height != FILLING and height >= FILLING:
hw5_443.py(13):     for test in boxH : 
hw5_443.py(14):         print (outline + (fill* (width-FILLING)) + outline)
$###$
hw5_443.py(13):     for test in boxH : 
hw5_443.py(14):         print (outline + (fill* (width-FILLING)) + outline)
$###$
hw5_443.py(13):     for test in boxH : 
hw5_443.py(14):         print (outline + (fill* (width-FILLING)) + outline)
$###$
hw5_443.py(13):     for test in boxH : 
hw5_443.py(15):     if height > STOPPER:
hw5_443.py(16):         print(outline * width)
$$$$$
 --- modulename: trace, funcname: _unsettrace
trace.py(77):         sys.settrace(None)
