 --- modulename: hw5_314, funcname: <module>
hw5_314.py(1): def main():
hw5_314.py(11): main()
 --- modulename: hw5_314, funcname: main
hw5_314.py(2):     width = int(input("Please enter the width of the box: "))
Please enter the width of the box:  --- modulename: codecs, funcname: getstate
codecs.py(332):         return (self.buffer, 0)
 --- modulename: codecs, funcname: decode
codecs.py(320):         data = self.buffer + input
codecs.py(321):         (result, consumed) = self._buffer_decode(data, self.errors, final)
codecs.py(323):         self.buffer = data[consumed:]
codecs.py(324):         return result
hw5_314.py(3):     height = int(input("Please enter the height of the box: "))
Please enter the height of the box: hw5_314.py(4):     outSymbol = input("Please enter a symbol for the box outline: ")
Please enter a symbol for the box outline: hw5_314.py(5):     inSymbol = input("Please enter a symbol for the box fill: ")
Please enter a symbol for the box fill:  --- modulename: codecs, funcname: getstate
codecs.py(332):         return (self.buffer, 0)
 --- modulename: codecs, funcname: decode
codecs.py(320):         data = self.buffer + input
codecs.py(321):         (result, consumed) = self._buffer_decode(data, self.errors, final)
codecs.py(323):         self.buffer = data[consumed:]
codecs.py(324):         return result
hw5_314.py(6):     print(outSymbol * width)
$$$$$
hw5_314.py(7):     for h in range(0, height - 2):
hw5_314.py(8):         print(outSymbol + (inSymbol*(width - 2)) + outSymbol)
$###$
hw5_314.py(7):     for h in range(0, height - 2):
hw5_314.py(8):         print(outSymbol + (inSymbol*(width - 2)) + outSymbol)
$###$
hw5_314.py(7):     for h in range(0, height - 2):
hw5_314.py(8):         print(outSymbol + (inSymbol*(width - 2)) + outSymbol)
$###$
hw5_314.py(7):     for h in range(0, height - 2):
hw5_314.py(9):     if width != 1:
hw5_314.py(10):         print(outSymbol * width)
$$$$$
 --- modulename: trace, funcname: _unsettrace
trace.py(77):         sys.settrace(None)
