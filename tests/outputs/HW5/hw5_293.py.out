 --- modulename: hw5_293, funcname: <module>
hw5_293.py(1): def main():
hw5_293.py(11): main()
 --- modulename: hw5_293, funcname: main
hw5_293.py(2):     width = int(input("Please enter the width of the box:"))
Please enter the width of the box: --- modulename: codecs, funcname: getstate
codecs.py(332):         return (self.buffer, 0)
 --- modulename: codecs, funcname: decode
codecs.py(320):         data = self.buffer + input
codecs.py(321):         (result, consumed) = self._buffer_decode(data, self.errors, final)
codecs.py(323):         self.buffer = data[consumed:]
codecs.py(324):         return result
hw5_293.py(3):     height = int(input("Please enter the height of the box:"))
Please enter the height of the box:hw5_293.py(4):     symbol = input("Please enter the symbol for the box outline:")
Please enter the symbol for the box outline:hw5_293.py(5):     fill = input("Please enter the symbol for the box fill")
Please enter the symbol for the box fill --- modulename: codecs, funcname: getstate
codecs.py(332):         return (self.buffer, 0)
 --- modulename: codecs, funcname: decode
codecs.py(320):         data = self.buffer + input
codecs.py(321):         (result, consumed) = self._buffer_decode(data, self.errors, final)
codecs.py(323):         self.buffer = data[consumed:]
codecs.py(324):         return result
hw5_293.py(6):     for h in range ( height):
hw5_293.py(7):         if h == 0 or h == height - 1:
hw5_293.py(8):             print(symbol * width)
$$$$$
hw5_293.py(6):     for h in range ( height):
hw5_293.py(7):         if h == 0 or h == height - 1:
hw5_293.py(10):             print(symbol + fill * ( width - 2 ) + symbol)
$###$
hw5_293.py(6):     for h in range ( height):
hw5_293.py(7):         if h == 0 or h == height - 1:
hw5_293.py(10):             print(symbol + fill * ( width - 2 ) + symbol)
$###$
hw5_293.py(6):     for h in range ( height):
hw5_293.py(7):         if h == 0 or h == height - 1:
hw5_293.py(10):             print(symbol + fill * ( width - 2 ) + symbol)
$###$
hw5_293.py(6):     for h in range ( height):
hw5_293.py(7):         if h == 0 or h == height - 1:
hw5_293.py(8):             print(symbol * width)
$$$$$
hw5_293.py(6):     for h in range ( height):
 --- modulename: trace, funcname: _unsettrace
trace.py(77):         sys.settrace(None)
