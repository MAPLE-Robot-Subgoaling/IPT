 --- modulename: hw5_135, funcname: <module>
hw5_135.py(1): def main():
hw5_135.py(13): main()
 --- modulename: hw5_135, funcname: main
hw5_135.py(2):     widthBox = input("Please enter the width of the box: ")
Please enter the width of the box:  --- modulename: codecs, funcname: getstate
codecs.py(332):         return (self.buffer, 0)
 --- modulename: codecs, funcname: decode
codecs.py(320):         data = self.buffer + input
codecs.py(321):         (result, consumed) = self._buffer_decode(data, self.errors, final)
codecs.py(323):         self.buffer = data[consumed:]
codecs.py(324):         return result
hw5_135.py(3):     heightBox = input("Please enter the height of the box: ")
Please enter the height of the box: hw5_135.py(4):     widthBox = int(widthBox)
hw5_135.py(5):     heightBox = int(heightBox)
hw5_135.py(6):     boxOut = input("Please enter the symbol for the box outline: ")
Please enter the symbol for the box outline: hw5_135.py(7):     boxIn = input("Please enter the symbol for the box fill: ")
Please enter the symbol for the box fill:  --- modulename: codecs, funcname: getstate
codecs.py(332):         return (self.buffer, 0)
 --- modulename: codecs, funcname: decode
codecs.py(320):         data = self.buffer + input
codecs.py(321):         (result, consumed) = self._buffer_decode(data, self.errors, final)
codecs.py(323):         self.buffer = data[consumed:]
codecs.py(324):         return result
hw5_135.py(8):     for i in range(heightBox):
hw5_135.py(9):         if i == 0 or i == heightBox - 1:
hw5_135.py(10):             print(widthBox * boxOut)
$$$$$
hw5_135.py(8):     for i in range(heightBox):
hw5_135.py(9):         if i == 0 or i == heightBox - 1:
hw5_135.py(12):             print(boxOut + boxIn * (widthBox - 2) + boxOut)
$###$
hw5_135.py(8):     for i in range(heightBox):
hw5_135.py(9):         if i == 0 or i == heightBox - 1:
hw5_135.py(12):             print(boxOut + boxIn * (widthBox - 2) + boxOut)
$###$
hw5_135.py(8):     for i in range(heightBox):
hw5_135.py(9):         if i == 0 or i == heightBox - 1:
hw5_135.py(12):             print(boxOut + boxIn * (widthBox - 2) + boxOut)
$###$
hw5_135.py(8):     for i in range(heightBox):
hw5_135.py(9):         if i == 0 or i == heightBox - 1:
hw5_135.py(10):             print(widthBox * boxOut)
$$$$$
hw5_135.py(8):     for i in range(heightBox):
 --- modulename: trace, funcname: _unsettrace
trace.py(77):         sys.settrace(None)
