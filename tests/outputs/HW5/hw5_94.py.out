 --- modulename: hw5_94, funcname: <module>
hw5_94.py(1): def main():
hw5_94.py(19): main()
 --- modulename: hw5_94, funcname: main
hw5_94.py(2):     width = int(input("Please enter the width of the box: "))
Please enter the width of the box:  --- modulename: codecs, funcname: getstate
codecs.py(332):         return (self.buffer, 0)
 --- modulename: codecs, funcname: decode
codecs.py(320):         data = self.buffer + input
codecs.py(321):         (result, consumed) = self._buffer_decode(data, self.errors, final)
codecs.py(323):         self.buffer = data[consumed:]
codecs.py(324):         return result
hw5_94.py(3):     height = int(input("Please enter the height of the box: "))
Please enter the height of the box: hw5_94.py(4):     symbol_outline = input("Please enter a symbol for the box outline: ")
Please enter a symbol for the box outline: hw5_94.py(5):     symbol_fill = input("Please enter a symbol for the box fill: ")
Please enter a symbol for the box fill:  --- modulename: codecs, funcname: getstate
codecs.py(332):         return (self.buffer, 0)
 --- modulename: codecs, funcname: decode
codecs.py(320):         data = self.buffer + input
codecs.py(321):         (result, consumed) = self._buffer_decode(data, self.errors, final)
codecs.py(323):         self.buffer = data[consumed:]
codecs.py(324):         return result
hw5_94.py(6):     height_list = [0]
hw5_94.py(7):     height_counter = 1
hw5_94.py(8):     print()

hw5_94.py(9):     for a in height_list:
hw5_94.py(10):         if len(height_list) != height:
hw5_94.py(11):             height_list.append(height_counter)
hw5_94.py(12):             height_counter = height_counter + 1
hw5_94.py(9):     for a in height_list:
hw5_94.py(10):         if len(height_list) != height:
hw5_94.py(11):             height_list.append(height_counter)
hw5_94.py(12):             height_counter = height_counter + 1
hw5_94.py(9):     for a in height_list:
hw5_94.py(10):         if len(height_list) != height:
hw5_94.py(11):             height_list.append(height_counter)
hw5_94.py(12):             height_counter = height_counter + 1
hw5_94.py(9):     for a in height_list:
hw5_94.py(10):         if len(height_list) != height:
hw5_94.py(11):             height_list.append(height_counter)
hw5_94.py(12):             height_counter = height_counter + 1
hw5_94.py(9):     for a in height_list:
hw5_94.py(10):         if len(height_list) != height:
hw5_94.py(9):     for a in height_list:
hw5_94.py(13):     for row in height_list:
hw5_94.py(14):         if row == 0 or row == height - 1:
hw5_94.py(15):             print(symbol_outline * width)
$$$$$
hw5_94.py(13):     for row in height_list:
hw5_94.py(14):         if row == 0 or row == height - 1:
hw5_94.py(17):             print(symbol_outline + (symbol_fill * (width - 2)) + symbol_outline)
$###$
hw5_94.py(13):     for row in height_list:
hw5_94.py(14):         if row == 0 or row == height - 1:
hw5_94.py(17):             print(symbol_outline + (symbol_fill * (width - 2)) + symbol_outline)
$###$
hw5_94.py(13):     for row in height_list:
hw5_94.py(14):         if row == 0 or row == height - 1:
hw5_94.py(17):             print(symbol_outline + (symbol_fill * (width - 2)) + symbol_outline)
$###$
hw5_94.py(13):     for row in height_list:
hw5_94.py(14):         if row == 0 or row == height - 1:
hw5_94.py(15):             print(symbol_outline * width)
$$$$$
hw5_94.py(13):     for row in height_list:
hw5_94.py(18):     print()

 --- modulename: trace, funcname: _unsettrace
trace.py(77):         sys.settrace(None)
