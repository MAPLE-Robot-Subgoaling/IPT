 --- modulename: hw5_96, funcname: <module>
hw5_96.py(1): def main():
hw5_96.py(13): main()
 --- modulename: hw5_96, funcname: main
hw5_96.py(2):     Width = int(input("Please enter the width of the box: "))
Please enter the width of the box:  --- modulename: codecs, funcname: getstate
codecs.py(332):         return (self.buffer, 0)
 --- modulename: codecs, funcname: decode
codecs.py(320):         data = self.buffer + input
codecs.py(321):         (result, consumed) = self._buffer_decode(data, self.errors, final)
codecs.py(323):         self.buffer = data[consumed:]
codecs.py(324):         return result
hw5_96.py(3):     Height = int(input("Please enter the height of the box: "))
Please enter the height of the box: hw5_96.py(4):     Symbol1 = input("Please enter a symbol for the box outline: ")
Please enter a symbol for the box outline: hw5_96.py(5):     Symbol2 = input("Please enter a symbol for the box fill: ")
Please enter a symbol for the box fill:  --- modulename: codecs, funcname: getstate
codecs.py(332):         return (self.buffer, 0)
 --- modulename: codecs, funcname: decode
codecs.py(320):         data = self.buffer + input
codecs.py(321):         (result, consumed) = self._buffer_decode(data, self.errors, final)
codecs.py(323):         self.buffer = data[consumed:]
codecs.py(324):         return result
hw5_96.py(6):     for x in range(0,1):
hw5_96.py(7):         print(Symbol1*Width)
$$$$$
hw5_96.py(6):     for x in range(0,1):
hw5_96.py(8):     for x in range(0,Height-2):
hw5_96.py(9):         print(Symbol1,Symbol2*(Width-2),Symbol1)
$ ### $
hw5_96.py(8):     for x in range(0,Height-2):
hw5_96.py(9):         print(Symbol1,Symbol2*(Width-2),Symbol1)
$ ### $
hw5_96.py(8):     for x in range(0,Height-2):
hw5_96.py(9):         print(Symbol1,Symbol2*(Width-2),Symbol1)
$ ### $
hw5_96.py(8):     for x in range(0,Height-2):
hw5_96.py(10):     if(Height > 1):
hw5_96.py(11):         for x in range(0,1):
hw5_96.py(12):             print(Symbol1*Width)
$$$$$
hw5_96.py(11):         for x in range(0,1):
 --- modulename: trace, funcname: _unsettrace
trace.py(77):         sys.settrace(None)
