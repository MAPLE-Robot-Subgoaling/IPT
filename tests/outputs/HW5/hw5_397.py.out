 --- modulename: hw5_397, funcname: <module>
hw5_397.py(1): def box():
hw5_397.py(15): def main():
hw5_397.py(17): main()
 --- modulename: hw5_397, funcname: main
hw5_397.py(16):     box()
 --- modulename: hw5_397, funcname: box
hw5_397.py(2):     width = int(input("How wide do you want your box to be?"))
How wide do you want your box to be? --- modulename: codecs, funcname: getstate
codecs.py(332):         return (self.buffer, 0)
 --- modulename: codecs, funcname: decode
codecs.py(320):         data = self.buffer + input
codecs.py(321):         (result, consumed) = self._buffer_decode(data, self.errors, final)
codecs.py(323):         self.buffer = data[consumed:]
codecs.py(324):         return result
hw5_397.py(3):     height = int(input("How high do you want your box to be?"))
How high do you want your box to be?hw5_397.py(4):     outline = input("What symbol do you want your box to be oulined with?")
What symbol do you want your box to be oulined with?hw5_397.py(5):     fill = input("How would you like the box to be filled?")
How would you like the box to be filled? --- modulename: codecs, funcname: getstate
codecs.py(332):         return (self.buffer, 0)
 --- modulename: codecs, funcname: decode
codecs.py(320):         data = self.buffer + input
codecs.py(321):         (result, consumed) = self._buffer_decode(data, self.errors, final)
codecs.py(323):         self.buffer = data[consumed:]
codecs.py(324):         return result
hw5_397.py(6):     for i in range(0,width):
hw5_397.py(7):         if i == 0 or i == width:
hw5_397.py(8):            print(width * outline)
$$$$$
hw5_397.py(6):     for i in range(0,width):
hw5_397.py(7):         if i == 0 or i == width:
hw5_397.py(6):     for i in range(0,width):
hw5_397.py(7):         if i == 0 or i == width:
hw5_397.py(6):     for i in range(0,width):
hw5_397.py(7):         if i == 0 or i == width:
hw5_397.py(6):     for i in range(0,width):
hw5_397.py(7):         if i == 0 or i == width:
hw5_397.py(6):     for i in range(0,width):
hw5_397.py(9):     for j in range(0, (height-2)):
hw5_397.py(10):             if j == 0 and j == height:
hw5_397.py(13):                 print(fill* width)
#####
hw5_397.py(9):     for j in range(0, (height-2)):
hw5_397.py(10):             if j == 0 and j == height:
hw5_397.py(13):                 print(fill* width)
#####
hw5_397.py(9):     for j in range(0, (height-2)):
hw5_397.py(10):             if j == 0 and j == height:
hw5_397.py(13):                 print(fill* width)
#####
hw5_397.py(9):     for j in range(0, (height-2)):
hw5_397.py(14):     print(width * outline) 
$$$$$
 --- modulename: trace, funcname: _unsettrace
trace.py(77):         sys.settrace(None)
