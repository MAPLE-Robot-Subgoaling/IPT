 --- modulename: hw5_405, funcname: <module>
hw5_405.py(1): def main():
hw5_405.py(22): main()
 --- modulename: hw5_405, funcname: main
hw5_405.py(2):     NO_FILL = 0
hw5_405.py(3):     FIRST_LINE = 1
hw5_405.py(4):     SEC_LINE = 2
hw5_405.py(5):     widBox = int(input("Please enter the width of the box: "))
Please enter the width of the box:  --- modulename: codecs, funcname: getstate
codecs.py(332):         return (self.buffer, 0)
 --- modulename: codecs, funcname: decode
codecs.py(320):         data = self.buffer + input
codecs.py(321):         (result, consumed) = self._buffer_decode(data, self.errors, final)
codecs.py(323):         self.buffer = data[consumed:]
codecs.py(324):         return result
hw5_405.py(6):     heightBox = int(input("Please enter the height of the box: "))
Please enter the height of the box: hw5_405.py(7):     symOut = input("Please enter a symbol for the box outline: ")
Please enter a symbol for the box outline: hw5_405.py(8):     symFill = input("Please enter a symbol for the box fill: ")
Please enter a symbol for the box fill:  --- modulename: codecs, funcname: getstate
codecs.py(332):         return (self.buffer, 0)
 --- modulename: codecs, funcname: decode
codecs.py(320):         data = self.buffer + input
codecs.py(321):         (result, consumed) = self._buffer_decode(data, self.errors, final)
codecs.py(323):         self.buffer = data[consumed:]
codecs.py(324):         return result
hw5_405.py(9):     fillLine = widBox - SEC_LINE
hw5_405.py(10):     if fillLine >= NO_FILL  or  heightBox > FIRST_LINE:
hw5_405.py(11):         for p in range(FIRST_LINE):
hw5_405.py(12):             print(symOut * widBox)
$$$$$
hw5_405.py(11):         for p in range(FIRST_LINE):
hw5_405.py(13):         for p in range(SEC_LINE, heightBox):
hw5_405.py(14):             if widBox == FIRST_LINE:
hw5_405.py(17):                 print(symOut + (symFill * fillLine) + symOut)
$###$
hw5_405.py(13):         for p in range(SEC_LINE, heightBox):
hw5_405.py(14):             if widBox == FIRST_LINE:
hw5_405.py(17):                 print(symOut + (symFill * fillLine) + symOut)
$###$
hw5_405.py(13):         for p in range(SEC_LINE, heightBox):
hw5_405.py(14):             if widBox == FIRST_LINE:
hw5_405.py(17):                 print(symOut + (symFill * fillLine) + symOut)
$###$
hw5_405.py(13):         for p in range(SEC_LINE, heightBox):
hw5_405.py(18):         for p in range(heightBox, heightBox + FIRST_LINE):
hw5_405.py(19):             print(symOut * widBox)
$$$$$
hw5_405.py(18):         for p in range(heightBox, heightBox + FIRST_LINE):
 --- modulename: trace, funcname: _unsettrace
trace.py(77):         sys.settrace(None)
