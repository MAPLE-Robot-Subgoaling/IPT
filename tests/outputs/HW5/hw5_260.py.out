 --- modulename: hw5_260, funcname: <module>
hw5_260.py(1): def main():
hw5_260.py(11): main()
 --- modulename: hw5_260, funcname: main
hw5_260.py(2):     width = int(input("What is the width? "))
What is the width?  --- modulename: codecs, funcname: getstate
codecs.py(332):         return (self.buffer, 0)
 --- modulename: codecs, funcname: decode
codecs.py(320):         data = self.buffer + input
codecs.py(321):         (result, consumed) = self._buffer_decode(data, self.errors, final)
codecs.py(323):         self.buffer = data[consumed:]
codecs.py(324):         return result
hw5_260.py(3):     height = int(input("What is the height? "))
What is the height? hw5_260.py(4):     outline = input("What is the box outline? ")
What is the box outline? hw5_260.py(5):     fill = input("What is the box fill? ")
What is the box fill?  --- modulename: codecs, funcname: getstate
codecs.py(332):         return (self.buffer, 0)
 --- modulename: codecs, funcname: decode
codecs.py(320):         data = self.buffer + input
codecs.py(321):         (result, consumed) = self._buffer_decode(data, self.errors, final)
codecs.py(323):         self.buffer = data[consumed:]
codecs.py(324):         return result
hw5_260.py(6):     for i in range(height):
hw5_260.py(7):         if i == 0 or i == (height-1):
hw5_260.py(8):             print(outline * width)
$$$$$
hw5_260.py(6):     for i in range(height):
hw5_260.py(7):         if i == 0 or i == (height-1):
hw5_260.py(10):             print(outline + (fill*(width-2)) + outline)
$###$
hw5_260.py(6):     for i in range(height):
hw5_260.py(7):         if i == 0 or i == (height-1):
hw5_260.py(10):             print(outline + (fill*(width-2)) + outline)
$###$
hw5_260.py(6):     for i in range(height):
hw5_260.py(7):         if i == 0 or i == (height-1):
hw5_260.py(10):             print(outline + (fill*(width-2)) + outline)
$###$
hw5_260.py(6):     for i in range(height):
hw5_260.py(7):         if i == 0 or i == (height-1):
hw5_260.py(8):             print(outline * width)
$$$$$
hw5_260.py(6):     for i in range(height):
 --- modulename: trace, funcname: _unsettrace
trace.py(77):         sys.settrace(None)
