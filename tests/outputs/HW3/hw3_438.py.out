 --- modulename: hw3_438, funcname: <module>
hw3_438.py(1): SOLID_CEL = 0
hw3_438.py(2): SOLID_KEL = 273.16
hw3_438.py(3): GAS_CEL = 100
hw3_438.py(4): GAS_KEL = 373.16
hw3_438.py(5): def main():
hw3_438.py(22): main()
 --- modulename: hw3_438, funcname: main
hw3_438.py(6):     temp = float(input("Please enter the temperature: "))
Please enter the temperature:  --- modulename: codecs, funcname: getstate
codecs.py(332):         return (self.buffer, 0)
 --- modulename: codecs, funcname: decode
codecs.py(320):         data = self.buffer + input
codecs.py(321):         (result, consumed) = self._buffer_decode(data, self.errors, final)
codecs.py(323):         self.buffer = data[consumed:]
codecs.py(324):         return result
hw3_438.py(7):     tempScale = input("Please enter 'c' for Celcius, or 'k' for Kelvin: ")
Please enter 'c' for Celcius, or 'k' for Kelvin:  --- modulename: codecs, funcname: getstate
codecs.py(332):         return (self.buffer, 0)
 --- modulename: codecs, funcname: decode
codecs.py(320):         data = self.buffer + input
codecs.py(321):         (result, consumed) = self._buffer_decode(data, self.errors, final)
codecs.py(323):         self.buffer = data[consumed:]
codecs.py(324):         return result
hw3_438.py(8):     if(tempScale == 'c'):
hw3_438.py(15):     if(tempScale == 'k'):
 --- modulename: trace, funcname: _unsettrace
trace.py(77):         sys.settrace(None)
