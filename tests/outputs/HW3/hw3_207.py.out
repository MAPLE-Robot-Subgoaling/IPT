 --- modulename: hw3_207, funcname: <module>
hw3_207.py(1): def main():
hw3_207.py(22): main()
 --- modulename: hw3_207, funcname: main
hw3_207.py(2):     SOLID_TEMP_CELSIUS = 0
hw3_207.py(3):     GAS_TEMP_CELSIUS = 100
hw3_207.py(4):     SOLID_TEMP_KELVIN = 273.15
hw3_207.py(5):     GAS_TEMP_KELVIN = 373.15
hw3_207.py(6):     tempNum = float(input("Please enter the temperature: "))
Please enter the temperature:  --- modulename: codecs, funcname: getstate
codecs.py(332):         return (self.buffer, 0)
 --- modulename: codecs, funcname: decode
codecs.py(320):         data = self.buffer + input
codecs.py(321):         (result, consumed) = self._buffer_decode(data, self.errors, final)
codecs.py(323):         self.buffer = data[consumed:]
codecs.py(324):         return result
hw3_207.py(7):     degreeType = input("Please enter 'C' for Celsius or 'K' for Kelvin: ")
Please enter 'C' for Celsius or 'K' for Kelvin:  --- modulename: codecs, funcname: getstate
codecs.py(332):         return (self.buffer, 0)
 --- modulename: codecs, funcname: decode
codecs.py(320):         data = self.buffer + input
codecs.py(321):         (result, consumed) = self._buffer_decode(data, self.errors, final)
codecs.py(323):         self.buffer = data[consumed:]
codecs.py(324):         return result
hw3_207.py(8):     if (degreeType == "C"):
hw3_207.py(16):         if (tempNum <= SOLID_TEMP_KELVIN):
hw3_207.py(18):         elif (tempNum > SOLID_TEMP_KELVIN and tempNum < GAS_TEMP_KELVIN):
hw3_207.py(21):             print("At this temperature, water is a gas.")
At this temperature, water is a gas.
 --- modulename: trace, funcname: _unsettrace
trace.py(77):         sys.settrace(None)
