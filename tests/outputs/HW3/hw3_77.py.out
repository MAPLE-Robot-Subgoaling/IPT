 --- modulename: hw3_77, funcname: <module>
hw3_77.py(1): def main():
hw3_77.py(11): main()
 --- modulename: hw3_77, funcname: main
hw3_77.py(2):     KELVIN_IS_CELSIUS=273.15
hw3_77.py(3):     FROZEN=0
hw3_77.py(4):     GAS=100
hw3_77.py(5):     tempNum=float(input("Please enter the temperature: "))
Please enter the temperature:  --- modulename: codecs, funcname: getstate
codecs.py(332):         return (self.buffer, 0)
 --- modulename: codecs, funcname: decode
codecs.py(320):         data = self.buffer + input
codecs.py(321):         (result, consumed) = self._buffer_decode(data, self.errors, final)
codecs.py(323):         self.buffer = data[consumed:]
codecs.py(324):         return result
hw3_77.py(6):     tempScale=input("Please enter 'C' for Celsius, or 'K' for Kelvin: ")
Please enter 'C' for Celsius, or 'K' for Kelvin:  --- modulename: codecs, funcname: getstate
codecs.py(332):         return (self.buffer, 0)
 --- modulename: codecs, funcname: decode
codecs.py(320):         data = self.buffer + input
codecs.py(321):         (result, consumed) = self._buffer_decode(data, self.errors, final)
codecs.py(323):         self.buffer = data[consumed:]
codecs.py(324):         return result
hw3_77.py(7):     if(tempScale == "K"):tempNum = tempNum-KELVIN_IS_CELSIUS
hw3_77.py(8):     if(tempNum<=FROZEN):print("At this temperature, water is (frozen) solid.")
hw3_77.py(9):     if(tempNum>FROZEN and tempNum<GAS):print("At this temperature, water is liquid.")
hw3_77.py(10):     if(tempNum>=GAS):print("At this temperature, water is gas.")
At this temperature, water is gas.
 --- modulename: trace, funcname: _unsettrace
trace.py(77):         sys.settrace(None)
