 --- modulename: hw3_342, funcname: <module>
hw3_342.py(1): KELVIN = 'K'
hw3_342.py(2): CELSIUS = 'C'
hw3_342.py(3): WATER_SOLID = "At this temperature, water is a (frozen) solid."
hw3_342.py(4): WATER_GAS = "At this temperature, water is a gas."
hw3_342.py(5): WATER_LIQUID = "At this temperature, water is a liquid."
hw3_342.py(6): CELSIUS_BOILING = 100.0
hw3_342.py(7): CELSIUS_FREEZING = 0.0
hw3_342.py(8): KELVIN_BOILING = 373.15
hw3_342.py(9): KELVIN_FREEZING = 273.15
hw3_342.py(10): def main() :
hw3_342.py(27): main()
 --- modulename: hw3_342, funcname: main
hw3_342.py(11):     temperature = float(input("Please enter the temperature: "))
Please enter the temperature:  --- modulename: codecs, funcname: getstate
codecs.py(332):         return (self.buffer, 0)
 --- modulename: codecs, funcname: decode
codecs.py(320):         data = self.buffer + input
codecs.py(321):         (result, consumed) = self._buffer_decode(data, self.errors, final)
codecs.py(323):         self.buffer = data[consumed:]
codecs.py(324):         return result
hw3_342.py(12):     scale = input("Please enter 'C' for Celsius, or 'K' for Kelvin: ")
Please enter 'C' for Celsius, or 'K' for Kelvin:  --- modulename: codecs, funcname: getstate
codecs.py(332):         return (self.buffer, 0)
 --- modulename: codecs, funcname: decode
codecs.py(320):         data = self.buffer + input
codecs.py(321):         (result, consumed) = self._buffer_decode(data, self.errors, final)
codecs.py(323):         self.buffer = data[consumed:]
codecs.py(324):         return result
hw3_342.py(13):     if scale == CELSIUS :
hw3_342.py(20):     elif scale == KELVIN :
hw3_342.py(21):         if temperature >= KELVIN_BOILING :
hw3_342.py(22):             print(WATER_GAS)
At this temperature, water is a gas.
 --- modulename: trace, funcname: _unsettrace
trace.py(77):         sys.settrace(None)
