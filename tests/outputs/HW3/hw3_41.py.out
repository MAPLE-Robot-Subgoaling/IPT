 --- modulename: hw3_41, funcname: <module>
hw3_41.py(1): def main():
hw3_41.py(24): main()
 --- modulename: hw3_41, funcname: main
hw3_41.py(2):     CELSIUS = "C"
hw3_41.py(3):     KELVIN = "K"
hw3_41.py(4):     SOLID_C = 0.0
hw3_41.py(5):     GAS_C = 100.0
hw3_41.py(6):     SOLID_K = 273.16
hw3_41.py(7):     GAS_K = 373.16
hw3_41.py(8):     userTemperature = float(input("Enter the temperature: "))
Enter the temperature:  --- modulename: codecs, funcname: getstate
codecs.py(332):         return (self.buffer, 0)
 --- modulename: codecs, funcname: decode
codecs.py(320):         data = self.buffer + input
codecs.py(321):         (result, consumed) = self._buffer_decode(data, self.errors, final)
codecs.py(323):         self.buffer = data[consumed:]
codecs.py(324):         return result
hw3_41.py(9):     userScale = input("Enter 'C' if it is in Celsius, 'K' if it is in Kelvin: ")
Enter 'C' if it is in Celsius, 'K' if it is in Kelvin:  --- modulename: codecs, funcname: getstate
codecs.py(332):         return (self.buffer, 0)
 --- modulename: codecs, funcname: decode
codecs.py(320):         data = self.buffer + input
codecs.py(321):         (result, consumed) = self._buffer_decode(data, self.errors, final)
codecs.py(323):         self.buffer = data[consumed:]
codecs.py(324):         return result
hw3_41.py(10):     if userScale == CELSIUS:
hw3_41.py(17):     if userScale == KELVIN:
hw3_41.py(18):         if userTemperature >= GAS_K:
hw3_41.py(19):             print("At this temperature, water is a gas.")
At this temperature, water is a gas.
hw3_41.py(20):         if userTemperature <= SOLID_K:
hw3_41.py(22):         if (userTemperature > SOLID_K) and (userTemperature < GAS_K):
 --- modulename: trace, funcname: _unsettrace
trace.py(77):         sys.settrace(None)
