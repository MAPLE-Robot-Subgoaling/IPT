 --- modulename: hw3_290, funcname: <module>
hw3_290.py(1): def main():
hw3_290.py(24): main()
 --- modulename: hw3_290, funcname: main
hw3_290.py(2):     gasCelsius = 100
hw3_290.py(3):     solCelsius = 0
hw3_290.py(4):     solKelvin = 273.15
hw3_290.py(5):     gasKelvin = 373.15
hw3_290.py(6):     celsius = "C"
hw3_290.py(7):     kelvin = "K"
hw3_290.py(8):     userTemp = float(input("Please enter the temperature: "))
Please enter the temperature:  --- modulename: codecs, funcname: getstate
codecs.py(332):         return (self.buffer, 0)
 --- modulename: codecs, funcname: decode
codecs.py(320):         data = self.buffer + input
codecs.py(321):         (result, consumed) = self._buffer_decode(data, self.errors, final)
codecs.py(323):         self.buffer = data[consumed:]
codecs.py(324):         return result
hw3_290.py(9):     userUnit = str(input("Please enter 'C' for Celsius, or 'K' for Kelvin: "))
Please enter 'C' for Celsius, or 'K' for Kelvin:  --- modulename: codecs, funcname: getstate
codecs.py(332):         return (self.buffer, 0)
 --- modulename: codecs, funcname: decode
codecs.py(320):         data = self.buffer + input
codecs.py(321):         (result, consumed) = self._buffer_decode(data, self.errors, final)
codecs.py(323):         self.buffer = data[consumed:]
codecs.py(324):         return result
hw3_290.py(10):     if userUnit == celsius:
hw3_290.py(17):     if userUnit == kelvin:
hw3_290.py(18):         if userTemp <= solKelvin:
hw3_290.py(20):         elif userTemp >= gasKelvin:
hw3_290.py(21):             print("At this temperature, water is a gas")
At this temperature, water is a gas
 --- modulename: trace, funcname: _unsettrace
trace.py(77):         sys.settrace(None)
