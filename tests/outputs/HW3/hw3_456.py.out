 --- modulename: hw3_456, funcname: <module>
hw3_456.py(1): def main():
hw3_456.py(22): main()
 --- modulename: hw3_456, funcname: main
hw3_456.py(2):     waterTemp = float(input("Please enter the temperature "))
Please enter the temperature  --- modulename: codecs, funcname: getstate
codecs.py(332):         return (self.buffer, 0)
 --- modulename: codecs, funcname: decode
codecs.py(320):         data = self.buffer + input
codecs.py(321):         (result, consumed) = self._buffer_decode(data, self.errors, final)
codecs.py(323):         self.buffer = data[consumed:]
codecs.py(324):         return result
hw3_456.py(3):     scaleType = input("Please enter 'C' for Celcius or 'K' for Kelvin")
Please enter 'C' for Celcius or 'K' for Kelvin --- modulename: codecs, funcname: getstate
codecs.py(332):         return (self.buffer, 0)
 --- modulename: codecs, funcname: decode
codecs.py(320):         data = self.buffer + input
codecs.py(321):         (result, consumed) = self._buffer_decode(data, self.errors, final)
codecs.py(323):         self.buffer = data[consumed:]
codecs.py(324):         return result
hw3_456.py(4):     FREEZE_C = 0
hw3_456.py(5):     FREEZE_K = 273.15
hw3_456.py(6):     GAS_C = 100
hw3_456.py(7):     GAS_K = 373.15
hw3_456.py(8):     if scaleType == "C":
hw3_456.py(15):     elif scaleType == "K":
hw3_456.py(16):         if waterTemp <= FREEZE_K:
hw3_456.py(18):         if waterTemp > FREEZE_K and waterTemp < GAS_K:
hw3_456.py(20):         if waterTemp >= GAS_K:
hw3_456.py(21):             print("At this temperature, water is a gas")
At this temperature, water is a gas
 --- modulename: trace, funcname: _unsettrace
trace.py(77):         sys.settrace(None)
